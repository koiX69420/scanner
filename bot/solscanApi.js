const SOLSCAN_API_KEYS = process.env.SOLSCAN_API_KEYS?.split(",") || []; // Load multiple API keys
if (SOLSCAN_API_KEYS.length === 0) throw new Error("No SOLSCAN API keys provided");
let currentApiKeyIndex = 0; // Track which API key to use

let apiCallCount = 0;

// Function to get the next API key in round-robin fashion
function getNextApiKey() {
  const apiKey = SOLSCAN_API_KEYS[currentApiKeyIndex]; // Get the current key
  currentApiKeyIndex = (currentApiKeyIndex + 1) % SOLSCAN_API_KEYS.length; // Move to next key
  return apiKey;
}

// Addresses to exclude from the funding map
const excludedSenders = new Set(["2RH6rUTPBJ9rUDPpuV9b8z1YL56k1tYU6Uk5ZoaEFFSK",
  "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
  "mpa4abUkjQoAvPzREkh5Mo75hZhPFQ2FSH6w7dWKuQ5",
  "j1oAbxxiDUWvoHxEDhWE7THLjEkDQW2cSHYn2vttxTF",
  "59L2oxymiQQ9Hvhh92nt8Y7nDYjsauFkdb3SybdnsG6h",
  "6iQKfEyhr3bZMotVkW6beNZz5CPAkiwvgV2CTje9pVSS",
  "AVzP2GeRmqGphJsMxWoqjpUifPpCret7LqWhD8NWQK49",
  "61aq585V8cR2sZBeawJFt2NPqmN7zDi1sws4KLs5xHXV",
  "5tzFkiKscXHK5ZXCGbXZxdw7gTjjD1mBwuoFbhUvuAi9",
  "3gd3dqgtJ4jWfBfLYTX67DALFetjc5iS72sCgRhCkW2u",
  "31rYartQwHeBMjAe2MgGpffGV57fQY3kug4BDN8tLGqQ",
  "EXJHiMkj6NRFDfhWBMKccHNwdSpCT7tdvQeRf87yHm6T",
  "2Wk4x9xaxmqvXr7amKA36UaQzPcqri3HCGmg6wWxo7c5",
  "9DrvZvyWh1HuAoZxvYWMvkf2XCzryCpGgHqrMjyDWpmo",
  "75NPzpxoh8sXGuSENFMREidq6FMzEx4g2AfcBEB6qjCV",
  "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1",
  "H4yiPhdSsmSMJTznXzmZvdqWuhxDRzzkoQMEWXZ6agFZ",
  "7mhcgF1DVsj5iv4CxZDgp51H6MBBwqamsH1KnqXhSRc5",
  "G62LeCBehaarj5iVh58s7QTC61upEJiJhuK3BCQ2GqW6",
  "B9i8MmcqLeirprvEcKNXd9NiiMh1EFVD4jqZVJMZb89c",
  "DxcWxHmviQf4PBeygE3rWuXKYzYTdfUt98gq5SYEbY5f",
  "AoXcyDWVEEimyKaAK5yYRTSv7MnWnFgiZYUgyYsaiRQQ",
  "GNfEWaWxopS5wYnLWrdz2arZBzxQdC9hZS3ZGWrdG7VP",
  "HAofAz6vqVeJME98HTbY3bG1SUmwSC7TNjZD9AveXu6b",
  "3NLhwaQeW4Y41QHegkQXmWbkaS7sc4WFx2x2fSr8tX7x",
  "BUvduFTd2sWFagCunBPLupG8fBTJqweLw9DuhruNFSCm",
  "FGBdZgVzfeWVCusWatjMQBtAXSMgyLZ3BUqb9GBxD4dS",
  "4bZ6o3eUUNXhKuqjdCnCoPAoLgWiuLYixKaxoa8PpiKk",
  "zvYPtfpDXwEE46C3NeZrKV5SHA416BiK2YabQTceQ8X",
  "stWirqFCf2Uts1JBL1Jsd3r6VBWhgnpdPxCTe1MFjrq",
  "6b4aypBhH337qSzzkbeoHWzTLt4DjG2aG8GkrrTQJfQA",
  "8pFhUqCU7Fkxfg2DLytRDf7a9oK4XGtN92PrYwtVQc6G",
  "G3KsUzKc1iAmLWRXeH23AdCFwMrgEmLqzqSP1Uth2aoj",
  "9un5wqE3q4oCjyrDkwsdD48KteCJitQX5978Vh7KKxHo",
  "42brAgAVNzMBP7aaktPvAmBSPEkehnFQejiZc53EpJFd",
  "EMjuABxELpYWYEwjkKmQKBNCwdaFAy4QYAs6W9bDQDNw",
  "5eosrve6LktMZgVNszYzebgmmC7BjLK8NoWyRQtcmGTF",
  "AZtztsJhyMWxRt72Y1exgo5mcx2qEHyazYVATBEJN8cP",
  "AC5RDfQFmDS1deWZos921JfqscXdByf8BKHs5ACWjtW2",
  "FUYgXinYR9acxjSmGh5H2ACWFCJ6gXK7koCV9zeFBpEy",
  "BSr4LVDphDRjBsDvQaq7DjzkShcjkNM8AwGW1ivLHime",
  "7UhEGEDxxXrhkSFzn1i4k6ukW7oo4PABgUaXimpCq6iE",
  "B9spsrMK6pJicYtukaZzDyzsUQLgc3jbx5gHVwdDxb6y",
  "9cNE6KBg2Xmf34FPMMvzDF8yUHMrgLRzBV3vD7b1JnUS",
  "5VCwKtCXgCJ6kit5FybXjvriW3xELsFDhYrPSqtJNmcD",
  "4Rm2L8C6K4BhkrtjvnrYC3PDScjGwZf4fk6AMYdK4GrZ",
  "88YteyZwmyAiV52D1ZnoymjwKt3NKHm3daW1oef7RyWM",
  "BjhPprqBjDj4StKTMWSsdkc4zfFcvg1pYJeNSVagzyZn",
  "GtoUEXpUo4N4Poy2QnEmn1Z8uyv3FiqxUwVju5JHXUAG",
  "7VHUFJHWu2CuExkJcJrzhQPJ2oygupTWkL2A2For4BmE",
  "u6PJ8DtQuPFnfmwHbGFULQ4u4EgjDiyYKjVEsynXq2w",
  "8Tp9fFkZ2KcRBLYDTUNXo98Ez6ojGb6MZEPXfGDdeBzG",
  "DgLcG7dhE8VBoA4rJu1resczXkYTSGUx7Ry1HicqcqZr",
  "9d9mb8kooFfaD3SctgZtkxQypkshx6ezhbKio89ixyy2",
  "AGTFfYbvMkHG9AGr5mvcTMSHW8jhem32edtquGCmn9vG",
  "FWznbcNXWQuHTawe9RxvQ2LdCENssh12dsznf4RiouN5",
  "8XmdpcJwcqyoezXDbnmMRoxtdfAqkbSxfZbyvXwKnn76",
  "4vgHoBrfVxPib6gPZe8H1csEdZWaq4o7HQCiVnDJyYmn",
  "AzcBxq9NMoVxBfvXcuc1Df3vrSwLAa2ZiMstsvSA91jn",
  "HLksszpjGgiRbyumXyQe5VpmJLuJEnf6YcRzghyDc8Fo",
  "GvXkGJiAnGv9wBW6XTD9ALYNFWsjJhQ4aA3NBbAEiRVU",
  "AZB72txkm2Ky2TramPF5FaiBtP13drQ2PFjbUum2qAdC",
  "22Wnk8PwyWZV7BfkZGJEKT9jGGdtvu7xY6EXeRh7zkBa",
  "ENKc8MyNnxruJGCfyx3XcBDtUn9oVtp7tbJAxVZGKJQ3",
  "EcH12jxhrbhF6qHqRzWpZ8rZU3TjG3sX6F67zP61oDJG",
  "3EpUYHv8NzoD5EzqB74JTYUtva2c1wj3Wq3oR5gaLfGt",
  "3j79gPSKJReLX5pn8D6CDwViJ9kFCV1Es27X882DgLXk",
  "FiRep26iRQbMaKbqhhs5CqXqy7YrHn462LbnQhXzB2ps",
  "8fxe1qGoDVLtqe9PAFyV4kR6zryTDyGQYb9AZQVUCvpM",
  "EEwTFenTjPJB7PrjFNaYHgUnNDRP9ApATC7C6zTatHr5",
  "8Mm46CsqxiyAputDUp2cXHg41HE3BfynTeMBDwzrMZQH",
  "Any5gL74oUQy9Psb3goym9STaYMau4CMrTkryS37T7iz",
  "5wcSKzCN4ChYgoau2aRdBy1iftBFvEs8MoiHN9Kfsn3G",
  "GB3c5nGKweW8cwM9k1B3U6W9mxw1ZyMDonSb6yFWRa18",
  "AcG5pZLa5c1A6FT8UkVbUNYvwuEKkAQHt5vgxqNPmdXJ",
  "4GC3a1RkRXx5shwGP8pTY6cxXgSWkbfc66vM53a6qSKj",
  "B1FN6n7pzuKyFnnKC68jU9UePTdAFqhcBMMsYJ5UeyYk",
  "A77HErqtfN1hLLpvZ9pCtu66FEtM8BveoaKbbMoZ4RiR",
  "F7RkX6Y1qTfBqoX5oHoZEgrG1Dpy55UZ3GfWwPbM58nQ",
  "4XiHz68YGYgyoWnJRfcyQaSedk5CB5mtJtH4fCLvGXZv",
  "HnLezgQkNVWMp2AV6mcHM1Ljst32kfsoVnYUkvXuQpjg",
  "6xAjFF1PhC26QJmVCNBoY74VuDU5PY2bR5sUcXteyoat",
  "5WumPYv4jDPRqWjWr3EeybLczpcohHrMPShK9WQ85qfY",
  "2EMY4vB3FJzoXL9EjXhDx6N4RgBVWAe6mqDj4PuwXx7z",
  "FVhQ3QHvXudWSdGix2sdcG47YmrmUxRhf3KCBmiKfekf",
  "bazxfWH6Vu2FncaSKc3kkgvyCuPwyFpx4ryZPcNiG7x",
  "CJjCPXBnSt6wRoyi7wzcMj5NbWvmPtzxE2JpWDMTRxj4",
  "8HrsvfxJXxAeryhdBu64uNG8qutHm4co4dVGbeWgzoEv",
  "J3YokACoNgcXPAADMmQ7Asjwnmfiyvm8H3YvEGzBtEvG",
  "5MfwpEF6XPBDaBBGsiEviNe8sMeF7DZCdQeC5mdrP1pt",
  "Cst5bqk7QJAj1tR7qH9eiYnT7ygDEashKYTFvV1obRGK",
  "8cPXGYX7Bhcrp5VaKNkPZNNWXg1gKd2ka81BFVk3mr35",
  "CGsdcLPzc9FM8Nq5HLkvUmSrhvoEbTuJUayRKR4Uy6Ub",
  "DdZR6zRFiUt4S5mg7AV1uKB2z1f1WzcNYCaTEEWPAuby",
  "GdNXJobf8fbTR5JSE7adxa6niaygjx4EEbnnRaDCHMMW",
  "FsSdtHPiYxz5kWm8xogCboYnXMr1eAomFA6i8mqyCHds",
  "HZRAWVTFqFsGZx4iQRWbkPendT9nGJQ2Tvr7qR9pbpbA",
  "EgqwJspEpdCsqd7xzUcb7S1E1UunuuX8xWTdGZg1dXa3",
  "5e2qRc1DNEXmyxP8qwPwJhRWjef7usLyi7v5xjqLr5G7",
  "9ZwT7RH9xgM925agqQof9XFPhLRbEWUB9Pr3qL4xEst3",
  "Go5dvuDcCBpUDDdscJtkae4NyAK3V1Q5JTsjMfoBemRU",
  "8F5yQQLSTnFVweVAj8e7kcjfDBjTZEo7XxcnShGJVYAZ",
  "FcfYR3GNuvWxgto8YkXLFbMKaDX4R6z39Js2MFH7vuLX",
  "AxqtG9SHDkZTLSWg81Sp7VqAzQpRqXtR9ziJ3VQAS8As",
  "5cz3Jz3QnDmTsQiw5MwkfV9tq4zf2yCzWcH7tXq5BxCw",
  "A742MX5uDPJWG6eN7mQwmksH2oRKBS9A1QMspgjLtZHT",
  "7VMTVroogF6GhVunnUWF9hX8JiXqPHiZoG3VKAe64Ckt",
  "Dx8iy2o46sK1DzWbEcznqSKeLbLVeu7otkibA3WohGAj",
  "12qzhTmTD45otivVHVJPiEUk1Zqfoy37mNeZVNXzejyX",
  "GRvmQxtFRqtQZYaeF8bUqH8FrDHoK5Eabs5aYyU34bPg",
  "FUeWuwf6bQYPKzGnJQbfNipPKN4b338zcWhuLkC7SxHD",
  "G6NEnG4EUERTz8UGQLBeqJBvqs9trpRML1qnE7mz995V",
  "Et9mv9nLFjU8bs3zQvj7s2FEarWTeqNkiu4nrja7H6it",
  "CMLjq7iom5NK6MEXQaYYnnftNWjL51YnRXvdCjCqe8iP",
  "8XWdMcfij9ZsaaJChNCP1mSb73yf5SY22TeTBo5gMUiX",
  "AmuBEUFtVcJXrbF9VVxNmDhrhuAKPasn3rxhuwGD7ahE",
  "BEw6vRRMkr25YXSNjxPw7DawiUh2c4QqbsqiDiALhRSi",
  "6FEVkH17P9y8Q9aCkDdPcMDjvj7SVxrTETaYEm8f51Jy",
  "GafNuUXj9rxGLn4y79dPu6MHSuPWeJR6UtTWuexpGh3U",
  "4ZJdyCAxPkarbyzUGRsR7MsSzTefM5Ew9gNduZYrkSYA",
  "G7vNg68KfbjVLCTc8Uw9JVmaC4ZajpX97ApkToBqvviy",
  "4YjnkVf7C51XVLNmXuHPvjgaupnhbVeYkmJ6BJ7uY7ke",
  "6WecYymEARvjG5ZyqkrVQ6YkhPfujNzWpSPwNKXHCbV2",
  "5ffvQo2MnNmF2iaDJ3ax1nYQW6izGZNBMs5xcAoFxJoZ",
  "B2EWnwgmNd3KMpD71yZMijhML1jd4TYp96zJdhMiWZ7b",
  "5m1vtmjxUjeM2We8jSaN7hwDgtZZX4q8pVnZXMSUkVM6",
  "6brjeZNfSpqjWoo16z1YbywKguAruXZhNz9bJMVZE8pD",
  "3csuXZKah5rgpb8RiwX9XfjrMxcp3u1K9mBdCwL51spj",
  "Hu6bKLvJgLWJ1Py6L7to13PJpgGgsGxKDg3aonRTTipv",
  "5Jdzhh93bonzsh1BgpqcYwFNiKekxWeVz2FdubsvJ22H",
  "28nYGHJyUVcVdxZtzKByBXEj127XnrUkrE3VaGuWj1ZU",
  "FPvyQn4RV7GAFkSWKSzGNfTAhmLpbdE8WtAfAPHkx5Ac",
  "HbJTxftxnXgpePCshA8FubsRj9MW4kfPscfuUfn44fnt",
  "EpH4ZKSeViL5qAHA9QANYVHxdmuzbUH2T79f32DmSCaM",
  "DdHDoz94o2WJmD9myRobHCwtx1bESpHTd4SSPe6VEZaz",
  "5PAhQiYdLBd6SVdjzBQDxUAEFyDdF5ExNPQfcscnPRj5",
  "6RYVQDmjx9MGRNdzATiYTMMLfDPXxteWzPYKgcHBQQF4",
  "BJgtsCvZjrxKps4dnzpAgJUNVsU3Es4vFLLzoDJGztYd",
  "3crXqa2Hs93HbPJAufn2Cg74CLEuoyB9G6DdAw2dNWjA",
  "C8k3kpm6UmdJvwmmNmVBjmRFg6Ma34Kuy6GVbm7mNFe8",
  "DCWLAUVb2qFdxnXptgTV8sQUGAhWBeYBgXMB1PEJf7Po",
  "HqbNpibyx4EMv6nQMdfg3EizB9gTGpgyYpyXFrByuN6c",
  "E294htaeagKoGLJmCpr4gkJF3B4uUEnTcq7kExX7WJGM",
  "2Ejnns2Fd5gsZdFJbnkZmQEwbrgoiMc2ikKcS2z2Ps3e",
  "3B7XAQrLoEMDEGvX8569F9GRb9PcXXocJmj5wvhhei9z",
  "3gN8hCuGZS6QwzgRAJVdNoB1B3peRSLYypwyzcMsAGEG",
  "HdaGSujN34kqKVBj8xS1h1ob3T2YewiBrx7utPDBoYtW",
  "5LJ93G4SQh9GiewTQJNAu6X9sQ1VVyrpCAgbQsRSgn22",
  "7ooPG7PsdDph3EoN2L4D7Rdb7nFh4ezuJ59pTsWzGhUr",
  "3y7XHdgciVwveMTGzGmsZR688g7t1udUPbTLsfdNWjFF",
  "BgKsDTATHFAPmbceR5B9wwWDKouQ8Ka9S17FPtWajDcr",
  "7R6XJ6jYwEHMbRsoLQFrCULRj4Vz8WQaTsZERkp7DD3X",
  "7ZHVYZfMwfEDzQpFdYrU5voGCsiUkCgpF5ZiFYNqPYxk",
  "35Ge2QXWemvStHPrtiDukkf1LG1cZskvy6VLxmJ2vz35",
  "3pFTQjRVwcJHSpUNH5n1hx6Jwx7V3EzJDDHaKuwExyGJ",
  "51KR6Q6TRisKJ3NyFB7vmGUji675ufsC8ycmeNY7dDiP",
  "GugU1tP7doLeTw9hQP51xRJyS8Da1fWxuiy2rVrnMD2m",
  "GKsaFk5MhnvLYhNiQBBJaFyMmuDCWdAfzEvP9sHtLwHS",
  "HUHZAu7BUgsD6ah3JEwLbKSxmYPpe7k2pU78SQ6vnwWL",
  "Dt4cZkJGboQXU3kZCXUByTnuuocgZV1bSTK3h9R317Fn",
  "AwhfqNgBdbzgsj3ecTSP9CSZWV9G3hGUkWZuyQKhdVR2",
  "FZEaZMmrRC3PDPFMzqooKLS2JjoyVkKNd2MkHjr7Xvyq",
  "HVh6wHNBAsG3pq1Bj5oCzRjoWKVogEDHwUHkRz3ekFgt",
  "DBD8hAwLDRQkTsu6EqviaYNGKPnsAMmQonxf7AH8ZcFY",
  "H5rmot8ejBUWzMPt6E44h27xj5obbSz3jVuK4AsJpHmv",
  "3X42tV7bxqWfZz7UhDSiCopMSkib6TVgQFSGdRDWirfV",
  "G7ctqCFSB8qfJ6Lx77fAHhwFcd9HQb1W3fjZTjBU9CFN",
  "6AoFxsVL6S7p9UBnV9zQQfGabhkp4nFz6Qpmq3KBWmS9",
  "Crgni8HS53y3pNSyYhptyMv85HkKenn5boYnoXDPnx86",
  "inR58x3fyq9yGqhmSNSJYgBbG2mHwHYtgM9xewtSxAc",
  "9DiruRpjnAnzhn6ts5HGLouHtJrT1JGsPbXNYCrFz2ad",
  "Bx2T1nwfsNFM9vd3VXj9fozT8YJTFWgNd7imUDA6XzVZ",
  "FyJBKcfcEBzGN74uNxZ95GxnCxeuJJujQCELpPv14ZfN",
  "EKpx6kCxXrSme1Db13eWGEWW6air1CFFSPDCkRwNiEm3",
  "9yhkdbkVNwyyLL9Wa4M4eZLm22FR27fTiTHZb7LaQ4po",
  "45s8vaeVytNhkAS1SmoSAPP7FqMj2j2vCCKSGqw1qv88",
  "4x2L19pZUv2XB2uuXJRKiPWdk672YcSLqx9zXqa27VXh",
  "2nQNF8F9LLWMqdjymiLK2u8HoHMvYa4orCXsp3w65fQ2",
  "opsM31pXd4cLvC3HoiUQhkTcU261GPtHKnKxRaGuto8",
  "F6ZjiBm1WgVXzez5vxHeBDgaVPQRfLyFb7GFwXvyZVxD",
  "G2NEckNz42pWoFkb4KLuvhLcepMyXN4Coy7rM5dHM1bK",
  "8N2ssXZGJbvVLszanERuCJpLZd2nuADgpZwLkDDxwNnS",
  "92yDUpj8DMLGuxho3tZHTHwdAcu38Y2t8C8Zsa6sX2iV",
  "8NBEbxLknGv5aRYefFrW2qFXoDZyi9fSHJNiJRvEcMBE",
  "HEW84eh6SrSgav1dVstwfJ7W9Xw5Fx8QwQHBqNxsdCjk",
  "CPj5JgHtzV438Z31MKDF8vpswq7oBxgroHo6eUSXKrvv",
  "DBmae92YTQKLsNzXcPscxiwPqMcz9stQr2prB5ZCAHPd",
  "6727ZvQ2YEz8jky1Z9fqDFG5mYuAvC9G34o2MxwzmrUK",
  "H1qNvbq53yS2eREijuqwnyBww6R6j21x5qXd8XTo25YS",
  "AMekyY73RJBd4urgZ2HvWV8yFzvk4nRsGmahuJcWiQri",
  "esYj5AxtpzStxFo6sq8QYUkeg1z85UJydxgd6AgeyHC",
  "ChHFK29gSarF8XxkBE8PeP6thaXUCvEBdo831ovUoVvQ",
  "CkDWVUpjDbpwA1HSisLAUgJrwEWez2FD9xZFJt6BASeA",
  "ASTyfSima4LLAdDgoFGkgqoKowG1LZFDr9fAQrg7iaJZ",
  "Aby8zv8WueGgQgqvBSMdifCGr1MXEFUhYXTEhbs2ChyE",
  "2zHBc6mhf8zh8Tx4dK3fHctoQjP5TYHvneY2JAf8FzMs",
  "4ZTmRoqtTPWCKFtcWYmm8D1iodWz9X6HRoFEigshjKUZ",
  "4kggxftsQDtbKG9riwEBGekJGrqVNYsxn3NHMwpJ5emb",
  "EbYu5v1LBBigFLoAtz1XBZqsYgysHC2qMV8UGaT9rJK3",
  "CMSY2WjRTKB2QhYFfq75U17bSSbMdtiWTW5EEP8cp7DE",
  "GxDDTT1zqgH2aNgdoyDvEgvHdsLq91JAExCTao7c5GT4",
  "28SqbTKJmqpRzqHmCqWHP6rHXMnLs5SVwWiTqzUZFWTm",
  "A5gsRX4652nsxHNjMyBVcphApE35GEyT9LqM9dQky4N5",
  "7MNeJP9gi5kBY1DVzJA1kzdeCr6oscXEZW51XMnmByC7",
  "E24GhYJnqknhR57Dcr4StDgMs8ogjcLzrmgbsVnX2Dw3",
  "Ep6aZ3eNtiBpLSNeweGDMbjRPRtjGkFPugnHp81U79Jb",
  "GcEXZEUhbK4KyFV7B7q28Zh7PKzGsC3oqgjvGRLaZJZu",
  "9YRBjVUMeGNGXqGHbJQJuHzkCCbR2YrP289SAvWLrEpr",
  "7S7r1mnB9LsEywHnWK9WnLDP9tnmo69JT4TW3kHPoznq",
  "FZDZuLD6KJAb1UXcGgvcQAmnDzQEfdbw5tAyJLFLQ6ND",
  "CbU4oSFCk8SVgW23NLvb5BwctvWcZZHfxRD6HudP8gAo",
  "32WMXy2CjmgweedFaUuNVHj6yM3DyVWH6eLQ4g2PHzkw",
  "71sDbduLVe1rULyKNKofBmYcbRXZ4WLLQ7WAamjgYV2m",
  "3mrGwAxGZhuja6aqxbngv12c2fPyiXZ7vuEcLEnYef4B",
  "2E1UKoiiZPwsp4vn6tUh5k61kG2UqYpT7oBrFaJUJXXd",
  "GNeE88D7V5Q9n7DuprodbMuxrzYppaLmnPqpiex1acX2",
  "EvBsWCe2dwyBeMWN9rDpguBRroHKGd4rT2ek8mnNaY8t",
  "F6HPJmaXTpMG94koQxBHT2bZC5o6YpVfN4Cpz93LyFQn",
  "GBrURzmtWujJRTA3Bkvo7ZgWuZYLMMwPCwre7BejJXnK",
  "AS5MV3ear4NZPMWXbCsEz3AdbCaXEnq4ChdaWsvLgkcM",
  "9i1u9btrq8m3PzwiogHGCGaLzjjrbBXfCkpKw3dC3fPu",
  "2rMuGTyXCqCHZBSu6NZR9Aq8MhZX9gLkCHoQsPhSj2YF",
  "CPZmKkAhD2wv1Z21EUZvdH8ZeSD13geAnSfyVBwcW8XK",
  "J1DqDswTDzKPJSc7FNUzJX7yAuXPPVKBfBGanZ6UQ7Wu",
  "4wirLYpkx4Nir5Nm6ZAQKxBX52RMMus4qd3atWdckZgy",
  "9oftVCo84yd6BY5K8LZ2TVWWcxBt5JktA9heBYtXSsec",
  "Q6XprfkF8RQQKoQVG33xT88H7wi8Uk1B1CC7YAs69Gi",
  "AKJt3m2xJ6ANda9adBGqb5BMrheKJSwxyCfYkLuZNmjn",
  "GziA3ZgkmnUcK9vuscnDpzLTcpHTSnmyQ6JwPKP5oSkR",
  "6BWhJHzH8kaDQUGVYmWhSDazeHm2hgHxxctiyvyJCN58",
  "4FDKx3S3k9eD7HeAhjQxHeYNLXHtreCD1GTUWktiYUvR",
  "EunkGqjpSKYEpGjQ21LektHZhEN5QMchqGVQy5gqsa56",
  "466XJYg6euJZDNPtdiepFs3RwGHszjC1evxhVf3eUFM6",
  "CugziSqZXcUStNPXbtRmq6atsrHqWY2fH2tAhsyApQrV",
  "PTVDJYvY11PisYFKkHWBmq15nxEWKy4LCJfK9GzLRY6",
  "A3znyaRYUvi7GbQv1pp9CqqiVo7anddU9rPKFH55V28R",
  "7DrC5txJhVDNWSC5o6kTgVPS4A8VVQ26NrJaCQo9kAHM",
  "CcPECA96WkGQJPQ1QPrvxBQkaJuY8ZUPWBQfFR1mf9tm",
  "4zqi7KMaJKsFhVjdWBqgqoD1JjsFAi3QMuAkjgvras4p",
  "GuzxqgA7MR8LNJPBuxj8LY4Fk29JjwErXCivNBD4uHZa",
  "HHtKUMcczQhT8iCvtZbVhXWx3xjrjZ4xE5Ak2igoJDed",
  "79Khhyh3nbHFMzQh9ZpNM4DStbHVboGNr9ys3kVnmiYY",
  "8JHjkHYxh291VJibyNpTYvkRDKmACqajDPd917d3GvdN",
  "ExuGbh5yqu5tcTaxVzkJ4yxcEmRenbBp1418x7mGvtyB",
  "7zcrhEY9kPWRhnEQUuSiWFkVRoNTVsfNkd3bVWuLwJGr",
  "13dure57EBjfdeA8tbFUuuv5VAzYiuKVw1aHTFutCBTt",
  "S4m83pHq12E2hwURxEhnHS7Wmz2wuCZpkjNM8b4GB7j",
  "AkbZvKxUAxMKz92FF7g5k2YLCJftg8SnYEPWdmZTt3mp",
  "AE8SnajswPd8XJs2pnSXe8XJuX2QFcBbC8vq61hm6qax",
  "8m5Aj17QvyLXuS747LEWMhoQ7gWrSNXia2ZfpBK4C5za",
  "894K7FrN4DW9BAD94KdG38PNmTtChtLZcSgd15PBbbeF",
  "GwH3Hiv5mACLX3ufTw1pFsrhSPon5tdw252DBs4Rx4PV",
  "EUBUCXW2SqDEmiT6T1RcygvcfizYdCm1Dcri8wEfTmPq",
  "HsPHxT67hpAL1d9HxVp9RKfX4zVHxkAGve1iUKbKaE4R",
  "BwWWWUyWhCZvLfccW7zztMjY4qQ5iFc4xbFCegU9xqNL",
  "CKy3KzEMSL1PQV6Wppggoqi2nGA7teE4L7JipEK89yqj",
  "STEPNwUmvdCWRm4yzH4rtCuPUeKuEapFvFKHKteiGH5",
  "F5U6ac2vLzv3pYsxPVPYhhvxZY7u2WJMQEk81E3keMhX",
  "8CphksNEpkL47rwWXCxfkJdLNbcWjrf6nAyogpp4LHiR",
  "4qD717qKoj3Sm8YfHMSR7tSKjWn5An817nArA6nGdcUR",
  "8aeuiCGuMNSctZn7dGkyfcXSv2qr6TRiBuzjsXjVVJgJ",
  "C17LG66VJ78NyY2FdJcbNNr6p3aXtA7a4uxjoiYUAbdx",
  "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ",
  "5sTQ5ih7xtctBhMXHr3f1aWdaXazWrWfoehqWdqWnTFP",
  "HiDF7GaTWmDvU489CHzBKP8pUYRttkkcVtabzFsqivfd",
  "Dx6XfWZuqXcTSaXrVWfRy5VATvbhsDMCsddgD6vreM8P",
  "AwiguNn4m6Z3qeeXoiF2cMcAEqs4nu7zBU611E3iTsmH",
  "9XdqjbUVuqco9jndS9yp8x7Rn8cBWCmmvPSs4ZgJjvmj",
  "F4C34HorTSr8C7Zmwj8Kdrbmq5XjV9d8iJywp74L8sZf",
  "AukApfs8UDvNcJDu5uo2XD8LVB8qbp31igfPNBiNxHF3",
  "2UuF65WXpcrRby2QAbFC2BzDieWTfyNboNxUXKizx33U",
  "GzHZpVPqDLK7sV6cFskSC4qaDzYWYryhf51VoFPtUvfz",
  "D6gCBB3CZEMNbX1PDr3GtZAMhnebEumcgJ2yv8Etv5hF",
  "146yGthSmnTPuCo6Zfbmr56YbAyWZ3rzAhRcT7tTF5ha",
  "8LYXdQX3vmepAV64stKv8A1JqNNNCVYj64vTdn9eN8v4",
  "AKg43cirVUUfLqpSGzuQwcH29cL5TFbFJ2Zj1cad82kE",
  "wwnxANsjoouei3kRehiCKATxALgzBDKarDHUsvC5kF7",
  "Diz1NNhKkSGzKzunHeQzGJPADExGAR4P6zRHj9dTAqqm",
  "4rfuw4bjfj3JSgQCaQcBKThep6c5hqrSxuhzMkBqAXrD",
  "9hNaQ3crLjWihWa5BeQgSYfrPY3eoDmHJAX2sTWE8nUC",
  "GnGREeRdqdfLghw9Jkk1g6znCzA35R3cN1ECz9iAYLxz",
  "444oHDm8G8FBNDKMTmxNbLP4pxGK4zJfXxrWGJMPpwt8",
  "8mQnMuApYmNouGvj9wVL2Sh21DFsrzb3sbbFL3rUHXr5",
  "BmGyWBMEcjJD7JQD1jRJ5vEt7XX2LyVvtxwtTGV4N1bp",
  "py5jDEUAynTufQHM7P6Tu9M8NUd8JYux7aMcLXcC51q",
  "4pHKEisSmAr5CSump4dJnTJgG6eugmtieXcUxDBcQcG5",
  "7dPqBYywCgLmjuHmexrEJLTCuoFpEUEf31Mjkjhz15wv",
  "FZXQwFXdHk4HaMhSKczdt3C4UseJpJiBn9hm8UHJWb8G",
  "9kUpz9hLTFv9Qx89vnWcE411k42MFAQmcWGM9mfcw2GA",
  "6wsjaQTidXNqmPDw4st2yMtFmTk7yyBEox5SydFQeJe7",
  "DKJGJCwGDZkGkGvB955WyPXcZFBSs86X64H7dPFPASyM",
  "AE16Zwo9rFUu548T6ctXozscVNTi7cBk3Z9NWoXAq11f",
  "GMH4A2veGhWupU95hMBWJUc1bSKA3qASYXzG1f5Konso",
  "3rBnnH9TTgd3xwu48rnzGsaQkSr1hR64nY71DrDt6VrQ",
  "GHjh6fxBCxUsUTnXkMUvvqQpXgEze54uhLqrqnEaknTn",
  "Hs5wsrjszrHJfbaQG6EsU7ErBSPJshNCCscrWkXLkpvG",
  "6zUM1QW7s37T9AfDJLmDgee619UCFs79yyveRpd5rTkk",
  "Gn2HnLKEB5M8BGiqm89E73ZdEwMPrwAernLxMyTmR8ep",
  "J2587XbzB73aDgFCRyXt5r4GNZB2YfPYXnXeTw5XhqUx",
  "AYm4Knn6Sw1f52Eq42ujQ2ez5Xb7iBJeviprFCA7ADCy",
  "hTvwKr1RvQdPS5xiWfXM2UZYuF55Ei8zzsuB7e58feu",
  "ERo2hRAc4L83gW2TrFNKxpKgXh5PaWZHC1tqW9RgKLvN",
  "CZYAwovWUmBc3LqkiQCnmtp5t9GxU5uyGQBdtDvXSnhw",
  "eynpJ4nVgJnCPMzSgJ4c5AmwstAvQRn4QqdAhGBynf2",
  "F2YUx8pn3FJUbNHQLyBAy77ESjH4n4tLeF86JHK3rRi9",
  "DSNLBheSZ6QogiKsXvozAKiC5PdrkPr2q17W3y6ArW6n",
  "9kE7TofGTurTc12WyrscW5ppj6qLyZWoKbufxioBHCrL",
  "12W5QN85j7oCoqhsuUUwof3Zrz5cyCavFrr51Vy25QxW",
  "BxQ6riqSsjmkeceyEauxBsfAhRRiKvjP6DEwExiHRbH4",
  "9o1ySM8nMLuC71fcVrbkf7vsn97URKGY1QQDwgrpt3it",
  "6iyaZw4aLJhmh2WXydrDw4poX1uzeu2UDfSatCwqmzPA",
  "DZcKwctpZwwvAiXvT7vKnUL22YSJ2RcmbMkkpo45bjiF",
  "5z7gxL5u4jCW9D6acu28LEw4RKTiBSG1EmXbtCX7efg2",
  "4oU8Cont1nHyDZAB8XXxYcFtbGQZhUtCC8Vpv9Tod2Kg",
  "Ffz4sGA4ZM5i5s6dgP4oHNUoc5q4pEV3gTarULYcjc2Q",
  "E1v9u4sRuVFWfmoJAuyZQ8M3BhNLBduwyyLA2kjvUfhs",
  "4S8C1yrRZmJYPzCqzEVjZYf6qCYWFoF7hWLRzssTCotX",
  "HUJBzdrs4QHwhgjkhe1JTA8in61NLob4k5DBWTQcPkND",
  "AGkGWK1R669KDT4FCqgDgK7PgahGJPjD4J9xmVjuL9kn",
  "5gKhVYfryg8RXXdGkgnnDLzi6GXd5JWn69S3FJ8nhK5R",
  "FK2NqCmycP81jhcibSPYoB4hJHE8Fzz4wgVWDyVbSgNv",
  "G8q5LV64ebNFPbTJmGfFcmc1RtNoAuWV6PJhetDgVW8X",
  "5daHqxX55eucNkce4mv9WFakrXtA3mNNWdJk7XckTxqH",
  "ES9227sQC1NQYu8uC4kmraDubXPXoBE9kT6uXiEv1A5R",
  "AobVSwdW9BbpMdJvTqeCN4hPAmh4rHm7vwLnQ5ATSyrS",
  "6YepcxFLq3n3YBvonTJpLvjZCWqsRCDxiVvEZMvYY4tj",
  "2zpvjBiMZhsBP52ra3EiYzaokSm8AHT6YjAZ75a6BpYQ",
  "FQnVcnwEXREJ3D4j7LzNGzCiMUVVqxkGEqZ2KffRY8ud",
  "AvqwMaafAkPtEvDkQniSNfWnEz3UCWbvJjpBPPVr8kdh",
  "9AdEE8AAm1XgJrPEs4zkTPozr3o4U5iGbgvPwkNdLDJ3",
  "FkgfPe8XndsMNp48qr5gxpVkWKcW36kERc5b9jnZnhYg",
  "3c8jBmg2D7ZQQ3TVi1k8tCoRJxW9NnLSJcFzmipfK3wL",
  "9P9MwtNknCNZkWLqgkuofM2b8FEDE8jNJxhnuSkHnhrf",
  "AvtfUvU3byPXgp6Dpw3mgKB2BbVwQvGyry9KeMzD9BLc",
  "DZFrAxJ3LMEw4ULMqT2fuJWPE5BWMFDhnsdbVTzyueHF",
  "Fig5DFym6WsoE1Yvv4FXunK3dbiNtQhHwLaK9MaMH44W",
  "GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL",
  "BESeJ71U2d6V1oUEXzLmWktHWwsgvFsevYjXtYicjLhp",
  "4kWwg9hQri1aFVqjxayDVmjmYtjXjrf1h5TpfvvAk5Sm",
  "DXqGeQGgTMum5XhZ5Lz9zkUsfZ11yBQsKX8bMaxmRHpU",
  "4wFYZAxXzrcVe27sKAH6P3sknx8x3tabYspRAGJRSynJ",
  "EKFy8JHvBHpLCjtRcWXeT2njRVg2wTPErMvWr8DkgBio",
  "93TzFVnVMRgzBiEXikfzSrmph9Yd9oZPwNxE549WMcdd",
  "B56RWQGf9RFw7t8gxPzrRvk5VRmB5DoF94aLoJ25YtvG",
  "JChFYmbw8beqG6KeZefGTZugNGjSGCeiULp8iAQSzbzW",
  "G1rXiDhfNAmD9KZ5vUgw7w6mwfg5marnEaxHUJqQ17k1",
  "2vs5Y9HrwP1djwdVS86WmQWcqNsSMaFh25MUUB9N1X72",
  "Gu6nuuGLPora979uTwwVCyKhiMRnGfzKAPwqcrBfaiJq",
  "FBuPUY9DxtSAUvYXaX3LTeg5bjjqASA3ALDWxLPUKz8T",
  "9JJ99U84vZBCjK6xvJ2GmqCSxxmoPGt1k7whoYnkuPux",
  "2sE8eXb6TZmr4yFmHwe88TtZuR6nwE6NdfDQZXNRczjN",
  "7TBfkFKLEoZjYAQFQo8WVoEwYuxV43SZ1R3FyekFkDCr",
  "7xhWrgCAuUuKzmVZcgVWoch5gr3TYpKD1Mptov8jvZ9C",
  "6nbufGfNrDodGdv5Ta8VUowuZPujkwaPdFT1eGrfg2rg",
  "Bt5wVr9E7ToVkNvseUrzWbhvcsjtxq17ET4q9V8knC6Q",
  "35hxjkNKK8svYuGkMYNv43UCGAEa1Z1k6vkZzZaoR341",
  "BybZQn9tcc9oc7PsCxGDmyExCtxBjBC2GaVQHNd52cgs",
  "CeizmGZEAGQbX1GwiWaNaQxAsKeuwrtMvBgrpuePbCDC",
  "555oNTKdRECgyLn8fBvySoN6hXMCszFq1Y4oea9p3ZFB",
  "AHV1UHvBpYc4m3fY3A5D4NKmAkKXX6d83e6dHoTWm5QT",
  "ERkCEcuDhSBmAREtaDmArJYCHo75soLWQKUW4yygmxdP",
  "2Exsx4WTQuoyRBZhsHLYpeqTqo1Tb8db3WDi1V6zko9T",
  "7Ng54qf7BrCcZLqXmKA9WSR7SVRn4q6RX1YpLksBQ21A",
  "3KNZ9i1dLNNqpBTKEkTgUQs6TNCd3bzuy6HwfoXACaRs",
  "HBkJwH6rjUUBK1wNhBuYgo9Wnk1iCx2phduyxWCQj6uk",
  "F3A5mQQwd2wPWWT9kivdobQZz3dxLVgKvwVQfebpWc84",
  "4YGkCUCr79MBMmLGXDfnYqwtnivBKkmA8EyEoJ1HkA7w",
  "cLGWXwJ53C1yDuf57gEs8egjAwk12oSvrGzQ21upSKh",
  "EaawGju3L7YD4mMhaoMACgTvyZCjCT3kT66dDzDwdcf9",
  "61yKS9bjxWdqNgAHt439DfoNfwK3uKPAJGWAsFkC5M4C",
  "DLY8RdtrGELZh7Dnmf1tm99sfcXh6KdMtgjgRD1m1uQ7",
  "55SK2QTq5MwRTqrZyToaa2pspRcqamSK9YhvWV8WPoo9",
  "AYhux5gJzCoeoc1PoJ1VxwPDe22RwcvpHviLDD1oCGvW",
  "6kb6FXoDz1VPBnXqSTHJWDhcLKRHpBAT2qvcLuKqjmQK",
  "Hodkwm8xf43JzRuKNYPGnYJ7V9cXZ7LJGNy96TWQiSGN",
  "J8k11p1E2FKfYhVxgNkKT9xWUz7Npwqx1RPQvGcfo56H",
  "6sN9RfJe5b84mSCH7LBKcWBBVWwv2zjyRf8dwprcBtMv",
  "5EJp7rmLFYrTijHFkgKhExeZVktn8apXUzTdoHWYrjY4",
  "BegpDy7BJEFLm26QdTF1GsbySE2Qo9JbAgPrtJsDGeLJ",
  "AYF5ocRuSkmQarGneiwZzaeZdWixemgQtQnyPwJG3pPh",
  "6fFuNm3JxHE8RdhbUzEkiXfVFwfpsZUngXEr8EYCiwhK",
  "G4KVzMEwLeT35Wp7JEnMUvwmF6J6vrqEsyAWVNm14rhY",
  "58FTXQjVe5TDHECWbyyNqVM7h8ybft38zHToDGBpvVPu",
  "9EpsUHyQEN7L3KxxDd3PwHjqZrQpRGtZ4Q1VKuymdbaQ",
  "3Fy5oFavnWzTZ8YRBhZkyT3ioKtBSDVVxFkbSPefJHyF",
  "6Psoc4NGYqNKni68gvWJZ8NixAHC7s2e6TfYu9UByiWs",
  "GLKg6ciaFK6iy49zFz6ZPXPjedUAt1ovznMXWLnKD1rv",
  "DnRoKAgrxb5WG7B7SdZ1jk37ULMcpf4TCV7Bnk83Jwqc",
  "CohzuRGFr1kAbCrRcyfJy3QHeMrcpFjowTsSvkWX1jDe",
  "ERCq4gapn57VXaw45J8JVxK63BHLmuYCEbCH3vbMwC43",
  "GzFKSq11V3UhXACUH4zBbKv78gyMqxMDy7fivhTCQZRg",
  "5Amvvx9vEzEkFCEJK6LaQcrL6i8y7HYdHoHVwZFabHAw",
  "8dTm2JzixW1cjPqzU2JPcGiVw2AGC5HpzF8i47hDRv7n",
  "9HwAxuuowYi3396rfUPk2dFzGvB1H87i8oC2BkEcR4QD",
  "2aPvnT6xfAXVT9NezNkb8mm4qEcZLwggkfBLxa1DgthX",
  "GCtwSTDHw8kL3qukDDKbKWLFzyAhcFCAFLLMssi38tyf",
  "2ZTXqG3qofzbnFmwxeKqeQMu3m3Dww2FAT6WnDG74jA1",
  "FZ1t8TZtx7VSCQdBsxvFJiezj9paUBF6Ub7RKA2eTGyE",
  "GNvbDBfsxteHvs51HVBb5BFv8eJMwQn6mxti5ej2RLuT",
  "4gnwEpf2s2Czy9Uhi3AWJngfkmhgw6xSCUcTnDVyRRaA",
  "6HsvzEFDGykubj1ZC4SHJnEprkGNL84bQDm4m89LjVw4",
  "53unSgGWqEWANcPYRF35B2Bgf8BkszUtcccKiXwGGLyr",
  "Da9cemtchCicBcDCeo4mrVfuWVGJi9F7CoBiA52Dicd1",
  "Cq2Tj6W6GeXWSj2jDgSJjbnPEnFXLixS4exXiPZARBXi",
  "EEFBGXbhUjT1FfvzGPbpcvmUo5YEATGEYkiYugRJU8bY",
  "FH9iLV5Z8EUEDMnW6CzUPkpDhWJCsHqJ5N4W23njNsUo",
  "2efeATXzyd3T5UaqC6rZyjspbBCcE1JyGKP2eE34rDdM",
  "A9YMi4Y5oTws8DPJV1TzDySun7DYPFaZET4A49K3BoDD",
  "F5aW6AUHn74rwpU6wS6PT77FrXWCfKcT7jX26fpbE635",
  "B47zazhtXi13JoUGTnnkyT9XyvZ8dTnHHSpFqrU2MWYS",
  "FixDET3jRBMjT9M69Wim8iRpMQiJHkSSfD7wivStuuph",
  "3mqQaGGzj7n1y3gjtmKG83LHjH2t7L8NA4wNSFJNnrFW",
  "BboZhMeLhxmPZM2noxKWJryaSVuKvRuACzsMp8LWhShF",
  "9YQR8t2PTXzwNAdnSWBDrtJdrVTAG2LGJJzgicBfPRsS",
  "4xE2uo1SicwrUqHXDMnZVd8e8ZF8b6Xynq7Udh6Bj4K9",
  "MfDuWeqSHEqTFVYZ7LoexgAK9dxk7cy4DFJWjWMGVWa",
  "G9XFfWz6adb9wFDKN2v7HfmJDgAc2hirrTwBmca4w26C",
  "jjCAwuuNpJCNMLAanpwgJZ6cdXzLPXe2GfD6TaDQBXt", ,
  "G1npHghfMyXZD1jemqpiAMhnznemTTvf6NyDnP8wRouP",
  "DWo8SNtdBDuebAEeVDf7cWBQ6DUvoDbS7K4QTrQvYS1S",
  "92q4Y2xGE39Bm2JgNZLZWuafoBiBR4gCj4igfpwvpgcD",
  "AsTVagCyZp1V98L3BqEyTQnp8TgAmzK8bz9vajL5gHY3",
  "GJMrAtT5Gqay84g357SG4GobL2K6AiQvBjcofzcszLEb",
  "FhTtxoWPze25MdLZE7mzAwThtU8dgx6mEBtcoeK9puQr",
  "4TYF8iW8bXET9C8aFgJoiUHhNtpBg5bqRsxSptCExvz7",
  "BUizSmcQ6yVCPgcj88eoaEzDeSLuDTpJHH8H6PDD6nba",
  "Ec6MuWtpvFcVyMsp7vipKCg1CMkKrWHZpWPdnJF16G57",
  "4AcoZa1P8fF5XK21RJsiuMRZPEScbbWNc75oakRFHiBz",
  "CXL7gifkMvsQM7xwbRaaEkgaCjdkmSVyDBc1Evnz565D",
  "4BtvjB3EES4UsZzAxo6P76rimvH5xKemBPV3xZ6BKn1R",
  "BHkk3RTd4Ue6JnqXpa9QHTXbn575ycR8hxVmYx4E254k",
  "EsqW28zvVgkEFcVasoKmtoo7xpu1fkh4jXUyQFwsjZwD",
  "Eyv5miAz6Y3qPMHZjGZEm1U5Ud28HX9d15MHMzMRApv5",
  "jqXd1Rj5UTbJtFnJvvhvqoFQEnh2Y8P7sPWaZDr1Vtv",
  "XsJPB25xKZGRNkvSAivMsxgSa87pWdMvVhyZYzDRbYv",
  "3WQumJtBjETSXqEY9SR6Ma1QC3e63hpWSqWATaoM4G7n",
  "AmuKpCo3CSqKQEFy7QoG9Uf9mM686YyKcpMSG1LnrDj1",
  "Gt6YGVbuS2J5ReZQUfbmqzBBGTPuZWwowUwcNe5wpYM",
  "6H1r5oVrjNBJoyGCRxCzK9e5Wx9BH4RvsRWvwCUzaDvL",
  "Fp1apMUNByDZkp89F7vky4jvb1dwaaxZftosyB5SG1p4",
  "8sjM83a4u2M8YZYshLGKzYxh1VHFfbgtaytwaoEg4bUJ",
  "C3hzpGjKVpjWqrSpD754GZv6h5cjEMrpMUuBYkFauCnU",
  "AcpdicowFWqTHHe7vSk3Ep4yf1QhJqMMU3kYXnbpo6B3",
  "6cGfyYbfxnJduTs8NysHNMJ4bebQG2XJh29XhgqMYjh3",
  "27b4PRN7K37rpTywq65t29rjuNfQkYpxZUjkbtHc5VvZ",
  "7u9MLmPHn7Zm6jUyJ4ukAzwuvL2vPYinPeFdvQwK9fMK",
  "3NSbLHsdMqvjgghHo2V4Ugr7dE8GpvZrm9DmgBdXgXTR",
  "5J9wHeDwMZiYzJq3Uqak7QecNAcRn8FrLLyRY3vNRZH5",
  "9vy7L3eJeAnjUBqrUy6ZhCcPniU19jkebMj9LFPTG1BN",
  "AYEZ63FHo1naGdYXKgafmremSEt1sczHBNgR1VEpNr7A",
  "ARejjahvMeUp8KLqCqugkj8MZXvrmYEXWXACDbqBRBJn",
  "2aGJygP87hFeKKZtDW3U43KcrU58vcTSN7qP4q4SZzVQ",
  "A32XEHLvTUCWTrAhTmoEQNWNEQmnD8RafAaeAcyEsRyw",
  "Adc72kPKkfw7EMpXZMcLva5yWJhgSvhC4rNpa3Mxi7Qv",
  "9M6zjLNsyQdNxwteHK8hqgbCJoEJ1QeyStACEC1QubRP",
  "CkKEyGaRGTjQcpW1Lf35W4LuRAStbyXMuepYZQX12Xjr",
  "AguTdjmW5SkhepT9qsKsj29SEqiVKsJchsap6Kma9i98",
  "EhuKBFXyUYgwc4nUMJMQHjY4A7w5nTTrMtY6z4TtZSFK",
  "CcPJow48P7tHQjTjxr5GKmdqaRFDbVdd25tDzh9bdYjp",
  "6qgBGeZgPyxdobeHhcNtAqVe927zodpiuoufhwGN8BhP",
  "GmWmH5vFAQ54fbqzrBe7hEzDWnaqrP8ELMfbgo6AJsec",
  "7dhLhyZX5enWYXShVWDm1fJhmV7gdUkDD9jYcGbxi26o",
  "E4Cdn3FRPVYUciBbkrWdFdUo1oyfo1r5r91SgA1Kczr6",
  "7k34RBgBvLDUfMiye9u54eW6BTY4E3niKCWGrM5LxPkU",
  "5bBFBuKQKCiszydTwR8i1CXDVrzMd8FXTEHgfSuJySrc",
  "48Zo7g9SReCWmNtCvr2es4H9CLCRQHrSND2Wzi61sCsQ",
  "FW6Nr61GigwkPRVu5WzLu7L6abvzZzrhnJ4iRNMfaSMi",
  "CQpvXgoaaawDCLh8FwMZEwQqnPakRUZ5BnzhjnEBPJv",
  "GL8T72PKygWaYrLKtSteN9UUvYYnuC8azNDunk4eaqqQ",
  "5AemYLGYaJnT5Pp1EVLYJT21aXBbTj2sWEeMoNhoqJ5n",
  "WE8X4Vntz9RJxWiSKrs4WBiMtCZyUyuR5BQYCrKmASN",
  "ByiAbN9MJhfQKGK5WJrfgko6XS88qqERQVRLWZTsvyTf",
  "HTyLUKeseSzwb5wk1qXPMZUgi857BUfgH36KRL98EUzn",
  "34bHtsg9PxbXWfbJFy1ou1vUeLqfC5i4pN6gWQkJVJir",
  "5rS25tz2qoFAJAsaUazTB7utwejVTxHYaDhSQuDgHtaK",
  "JDjuK1kZpScKKHJrQg5wzaVfPGoFdVaSiKDfrt3298EL",
  "BHKSy8GEcEkR86Cnw3Qb859EGgAs3aDqNgS7widG2Bsj",
  "3RhqrUEzUrC2TxH11hqtzMBGGPc23VriR9fB8ELyb2VV",
  "BcYRN3esUpzKV8KtTS2odB7cpxbfAPL3HixiT9i3EpN6",
  "Az1UkNXpwzkHfhLmoF55KJm3QcVhAUSWsSxUYvmmUDqF",
  "3nzLqsztx6ibTzZGs96MJKM3SgrEhfhW6RC2npFFN7U2",
  "Fo7DTEWgW8PYLcTuSAvz3Hf9f1qQW4ngJXm4J2EKJSRK",
  "HRURDwTjk1D4B2LzQxjetAQyBtpHhfSyNaRYHYgvFm2P",
  "GwNEpe5sX56GgL4twtPmQhR1nqbR8Qn4nbrvbzPWpWac",
  "UqYKdsVCTjv7gRtkhtYAu7RYQXVxFKadFrhoQ5iPyHu",
  "79sJvLQ3QrL88Uc9jgV3iTT5Ft19xtMbjmAkhgoKh38W",
  "2CqtySMPX32wdDoNvY99tZvTz5yMdULEeNbUeeLb9KTD",
  "EqfdXQTL9r8yzjgeTx3nceJBxH3gAMBjiQrUzsf6oRhx",
  "FdLA3AALhAMHb6aVEhq2RyPutUFRwaWFX2QJH89CiHnf",
  "36X7gEMQ4MgXL1YwpyiizQbdhcKtpD8YS88AsjDN3jJZ",
  "8HUWJoKMSXVKraKWRriBQZ5mGgfb7iALUEZsmunUQ1kC",
  "4n97NTp6JcuwAd8BQoghQCRwHD2Uc1KX8EX9dZKbUXJx",
  "6wUcg1Rot61uGG1ooqHXawCWM7LzyWzw1PzwiSH15gEg",
  "FMg3NnwuPqqUDcqJw3ot9QxCo2YUHy72zMBKHgpgUeMt",
  "7Lp4JBapgNhXoxpJtR2twufh7oaQyqngqJpy7HFJcn7h",
  "5dXaEdAZ4k1jKWbgeoWjL1WckkSaCxkPimgbMfGaxeAv",
  "9nUTd2UHdYAEbXHja2NAiRMGDgdwJVe84khvzUPGoQqs",
  "5MPLVoZ2cJHy8gkvFu9tCTuqu9P8Fm8xz8Swpo6TfjDu",
  "GYzTxa7CtkJ3gFshi8CusUaY65jX3xM4cEfwbKy2nztM",
  "8Lj26EwG5UvNV7zTXAb3irtRmUqMnGjv22oxx9YAZBVb",
  "BkfhvThwGB12kjGL7zCBLn6iiieUmKUYY9T7SVWDUBa4",
  "jcerNwQ1Kn5LJcjvSGYgRUwn4yepDF4wnXXejuE7gHF",
  "5E71WW7HmFXwSPaMCEWpXdxhiwYgVCLwz4L68GvjiKB3",
  "BiVLiNpJuEWMfS24KLPVcbDygFvSgpY3SaKB5ty6b4vq",
  "XqDwNVzNKQoMrofeDz8vMUdCGs5zqrjhbq8K1c21gCm",
  "CTdP8TSJD8dScC8ra2c96CFEiRTgBmTzPKyK4iCMysUb",
  "51PZFsSVorGDsWLopZvsqZ4zT1cHNzhfsL9KaJtBqZk1",
  "BxA9qKRVVFGQ82wxmMYiBFfSU7bHVNW7GJiQTsSJn2Dt",
  "DU7fnPGAvkLVjFMPrmuEihdojxSYLQHsWgCvoup2tqxe",
  "A9DK2Q5YNyiJsqFW49KGwk2wV51Xnqqs9MP1UqB1QcFK",
  "36axaSJmgX7JBnf3YGopCybMg5X8hTo32jcyMWFTdaMC",
  "E3NiM5n6s5CKKWrrhaeVjVSTKscRrysCtZeXnxn6yMgp",
  "CErTNSqoTvR4UrKneB69pJjXXjTURqEcf3PUCh8YzFDG",
  "4nySWcHD8jmTrDFnz7VB2j2AAQaCGaLMDLrKfUbxX6g2",
  "GoZpJCDKuvpfwK9SmYVkRkbb1eJgTDNjRhDTazAVs9Hy",
  "F9jNmLJL6H33nx5TQnsHBtzAxBd1toj5Wxx7zWqv6zLe",
  "779i3976Wh6d5NV3a3Ggit8vHCaJnTLywKN33RFCdF3T",
  "Czfq3xZZDmsdGdUyrNLtRhGc47cXcZtLG4crryfu44zE",
  "Ct79DRByecRYbpmmyygqoqB3fxuJSxhLLq4VpLAeVXD1",
  "GvGpLBtzzwKawM8s4UcKP2DsipVTqCMeHfNrXpUu9VKt",
  "9X5cNsgif7D8tLxDtoogQmtQ3CF5qPtqNBDsMd1WQW35",
  "4Jy7oJPtrZY2UBQJgDtpZX162WTor3YDycojqRknMmxp",
  "7L1HBfMHM6kfieBiqHaosS2R44fGQy8fWCpSHAXarmaH",
  "E6iQ6ujGTC3HAHzF9SqnmeL5yb6Qm37vwNuMJhZk4Qxn",
  "7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5",
  "7AjmundYaTTcCu2ECnmsyAqqG4c5fWnJf3PYPCUUj8nN",
  "G2bQHppb7EWpFR8x24Hwrhq1zVyEJx2n9VmdP85AfjVs",
  "3F6W6rAXE6GfRqCnSx2WLjGAXLWXK2mWWMw96H3epyLR",
  "E4fDRpDK2puJiafpHTNgc6zZb448JkQuKQ4VGpTkDWan",
  "EwJSXks3hFSja48GosjFjSu6kc9e5Qx1qnFzkeUhgnNG",
  "H7D8skg9Y9PhDKJdJNYyBzUaMEWXdY7beCZm96272QPM",
  "6erNn9LP9EQfJMgSBRKX3rt5tJYXraHMmgwbbSCWuWdj",
  "BRSCp759fJQjH7gub2roz14AreMSFn5Vpy6qhhg39NbT",
  "EjEps1fAhrzWa1XJVWAj9f2KgrThWxfA84QWKqa6Fid8",
  "GiSf1rz49mUzfg9t2f6YHapkiWgxE3UvxRdLe1uZLYfz",
  "3Ln6KEgLoMR2xFHfqtYazP7CxFQPDtUVVtwCVsLKVfmV",
  "4NDX7sEkyGhQ236NMXoiqGzgy3dKxyGMkytCNL49WXk7",
  "FDEAq4HvRMDNJ3h5JoZN33Ds2XrZ98B133GTnVLKuwhd",
  "9FtGm6hJULCpA8An4sFg5ysHUExDZBtMeDCxsYnTnWh5",
  "GhdBzhtWWCv6THY6fvyaJmvSSR7kzTXNf4KXe9Cs8MSC",
  "AkdadUx66Q51jXBc93jMHEDWDPNE7QLW8xsSgqqXLw97",
  "7LCwgH3TtA7v9jvPoU3zHhRUCgd2XNCdAwQSjBPDzFQ6",
  "3taxccqkMUPqkuKMAxR7hXLGDMTeoaiX7eNbQxpneRo1",
  "DH2zxu3TygUFwQvx7X1KjKqp1DbLFMTx5vn1w2HhEp1W",
  "9KDAbB9d2p4AQhWv35R6LKbUZufbngXSMyrPzkFeZz8B",
  "GrCcwXchtEx1zav3xgf1uJ6uVvHw3gdhwpwsUaLXtsiT",
  "FxteHmLwG9nk1eL4pjNve3Eub2goGkkz6g6TbvdmW46a",
  "J8GL2afPxQANAxA7TSNGEN71tFmRdXkYqR49vG6AJsuu",
  "EtpVbru22R79u2XCveTkQd4s3xdvqPYaiiUzdWnh6nNX",
  "Cyog5cFHAqy7xtQTLM92L8zmdSf5iJv6J1e1Dc2VVquu",
  "CMJMWvchm2MmdnLBoqoWRxGpbgcv6sGdb1WGWc5ndmpW",
  "ChwGRWgC8u9zZERnSRuuKZWqJC45dzt5m5hZPJKHVRUn",
  "2EwCz3enamF2mndb2iVEgYTHfmK1txQrzMSLVSmTggQR",
  "77ZLVMFU11pGDqcy7feQRkRwqwqJ1ahJL8bt25KCzToW",
  "fr6yQkDmWy6R6pecbUsxXaw6EvRJznZ2HsK5frQgud8",
  "BbHG9GvPActFGogv3iNrpDAj4qpXr8t3jF16uGxXcKci",
  "4YMtiDYtA6b1bNVjUDYQN5uFL7oXmLyN86KbG1KQYXiC",
  "7XADCPMGm3tYxAWAiGNNtUexfHdhTz7LSpDev7DSMn7i",
  "Hp53XEtt4S8SvPCXarsLSdGfZBuUr5mMmZmX2DRNXQKp",
  "HVSZJ2juJnMxd6yCNarTL56YmgUqzfUiwM7y7LtTXKHR",
  "DCn1s6ctS9UhHaxY31XY6pXBMnQv8MQvAy3QAoRohAkS",
  "6QuS2hNgE8LC1t15i3u4fCtRSjbXotdBChdcSoVV8Ct",
  "6sEk1enayZBGFyNvvJMTP7qs5S3uC7KLrQWaEk38hSHH",
  "2J7YD3TpcRV4J9EDmicC3KZ8qGXvPxZkMHKQznGWS5sA",
  "8hZGc3oinQhFzK6SkR1LD7R5BNn7f3yGq4wkYVU21ugC",
  "9RE2Gcyt4PhdYeTWpCwWeSik9Fpumk2tNbc7sQvFsg6i",
  "CebN5WGQ4jvEPvsVU4EoHEpgzq1VV7AbicfhtW4xC9iM",
  "J7g11CJfzojL6A3DWyqfee2gyYg6KMQv5Pcds89dK5wh",
  "B1BvMR1K6S7yVYCRNcVrLPBJLiWGHGsLEBLUdK7uwyN7",
  "EFm8ZpoH3N1HQE8YGBVxWkcqEDhkqx6UA9h71fmprjAk",
  "7e15gXEcPY8bLF57zQu55jV9i6sNuEVsaF6Sk5rGQ3C8",
  "EKD1G864uqMq8tJBiDbV167zfugD9Yeue3naFvNsqc1K",
  "XxMndQkb61nEvutpj4bAqcszQ71Ca5dZYJ6UAzG8ZeF",
  "i57ExrKB2i4mSgjSuq2xz617mQXmu33WG2WEYypmdvX",
  "2FwV6duQGoy2ABw4MXEgZS7q3SqinmKbJuSLB8ii97qu",
  "81BgcfZuZf9bESLvw3zDkh7cZmMtDwTPgkCvYu7zx26o",
  "6XHbvyqn2x6YLRBkL5dzcwjEspPEqkUGAGhPtNvYu1TG",
  "BT21p2ZPuQD8DNXRn7Z9h62CxpKY6uaf41iH7hVyqdSN",
  "4hjKHyB4rUJE7Mu7nEgY1dhetznwHqTQzCSJy5YUKJiu",
  "qFAfHEArPnFL9dZ3ymHRHHvqfb8Zjs1rKuLLHmqhH6D",
  "3AAjAP4VaDBDzVPtaZo1q3RjDA2LzPegQPsR8wh81vD2",
  "FjLvvmcZTZ6SsetgkcS7gu9gLXt6qhZfszTjx1t4bDtL",
  "3b7XQeZ8nSMyjcQGTFJS5kBw4pXS2SqtB9ooHCnF2xV9",
  "Cet3t77x2BBVSmiEFm8ZPoDSngbpso2RuWPL79Ky7SpA",
  "3gwtBUz9L9e8EunLAVUepYmqQSatuEmgDWbDqrTn14xw",
  "BQe7AvxAY1QaZvkYTceGtuhFyKRQMXNNGD3WRYoE98v7",
  "DPfZL5eQUPzvzJqUVnCqSHvrbNPSWDLTMQfU5bNEjJAu",
  "4Zuu9yAZAZDXzzmAb76w9hDDbT1tRYCJ9ZLL63guCSAn",
  "HSR2SbS9ES96oAVzcaSQ4ExbdRRuzUDKEPXE5aQtohGb",
  "7ZWDZ5oPs1yh6g31GEp2Di27qpUjQ8UZqnJa668zkMVy",
  "24PuKc2ZHKrt2esa528pfqzkifLzcTkgWnTVNSSby1vv",
  "DUHvDxvzPrP5WzGyLqKz6zHPf1o8QbFthCGmqYUhcoyQ",
  "F416eigwD6vhgfBWu5DF2MQYCXTPtCbr4UfLQHHQqriv",
  "3TkKUpZesB2GoUj9UPqmmzXBGPs4uoJWT8tJd4Grrmj1",
  "8VWWhUBkn4DoqdqctW3Xtk3tmeV1JwvRs1u87MsJJAy1",
  "E2PYgyd1UMC34ThAAKTWn2ZaV1r156conai4iRWsQpxB",
  "GVEWC4PkbLyMC9rbR8GPDMBmKc3KY4NSxxD5j4at18uy",
  "8v6fC8D4KPG63cx3gpy5aiLAzFJzKbtP1TjWrNtrgnWi",
  "DZ75pcYMvfKasvBJA6fvXyqeVA7vZHvnj6UYnFGRRXJy",
  "25TkcVshzz82FEgfdHSLdsJB68eeJ7fvrJfAjJ5PhAVA",
  "FakYUb1ASj3R17zWfsd6U5idZSaJ7b4nhrqdnVjExAYw",
  "BvdXEC5mn83QPMQR4CaihVqs8PLY9t1coJnMNrTsmHrG",
  "FgsJznUvuc1tJVEK2FW4nnxTYhfH6UiruUfLzjqSFCRg",
  "CmCFEee7nmWBoVpKTBn6jzcyb2P2Q24YBDa6Xzkk532e",
  "9973hWbcumZNeKd4UxW1wT892rcdHQNwjfnz8KwzyWp6",
  "6c6gxe3ShEqhyaqGbZRKXybPzqDaNKev2X5NzddK1Khs",
  "3tGwEnKHKPCTKaY9546n6BE8sjfj9zcqqttb6sZDkXPG",
  "8BGXiTgZUNXNvyKngikDZ4TrXgMZYQSEDHiKv1zekJRy",
  "FCALJ4edD2suu7Aii6thUyh8uetn61U2g5ymZsNMXMF6",
  "AP84nNhMKzqTcj1dWs7deDk2BYawcosh6iuf5c6Hgj8x",
  "AJRDyhefk1aRjW5ChSfCKhgG38suTJe7YBSMZiR8Tork",
  "GtxgnRiSfBzahR9xb7hvYbWq3Uzez7hpCz2BJbCLxKdq",
  "BB6toFFMQTvSYw5AZvVhWQGrs7oGnxhzjVQCie2rDsVt",
  "Guf5kJXEUniyyHiHevHRjxBDXb5Zk4y3Scev9iJMdm2t",
  "AZFrTDSwBXNvK3EUBzqUH5F3UTr8yuRv4brbRKsF4FQh",
  "7TQkfskBzADLzPan2A3aXdjiHJxGhisnCws5XJypJAm5",
  "BbWbNAEdK1jXwdQ8tPixSU3Kr22vF7UDPmXrfsqBt5HH",
  "GHQQ48Fcf3RjPyVQkma1EFh3ucGkiXzynwR2XR6fA3i2",
  "FrPfEtFtFC7UfeXHmUjE98UhXpmiXiQddzf1LMwFGpod",
  "HBxZShcE86UMmF93KUM8eWJKqeEXi5cqWCLYLMMhqMYm",
  "DDm2AFJH5QhugRzBp9cq3QXFtqrRQ7k79iBPf7RRban7",
  "BmFdpraQhkiDQE6SnfG5omcA1VwzqfXrwtNYBwWTymy6",
  "AeBwztwXScyNNuQCEdhS54wttRQrw3Nj1UtqddzB4C7b",
  "53gDPFjMUJonVZuJJQH4wxqYY2Zrokc7TNiripxPmde7",
  "GHcvSQcPntvEDk1gm3y4DTK9vN8uXxQQXkDL8SzLHQS9",
  "YPRVU2mcQjiDeghjWDd7UqYjwpuCYP4AYoHQiJbKWM2",
  "FveTbMVBDNy6Cp5etE5PXbQ3CiW1cXrVG1h2SNPYPgk4",
  "4K2Lse4uGc67xdutKrsmf4WgGcRevJ52YH4JaSfRrQS9",
  "G9X7F4JzLzbSGMCndiBdWNi5YzZZakmtkdwq7xS3Q3FE",
  "4bA9tExtrcy3TuYsBRrHwht2hoq2HwyKEqxud6XSCtHV",
  "3uxNepDbmkDNq6JhRja5Z8QwbTrfmkKP8AKZV5chYDGG",
  "7jM3NBhA5h6JDrSeAUu9a1SzL18ZRhgy4WJafEKGydVc",
  "CnXMWB8W7bcnADsZsJAJYkcuu8jr392ZFvxDBiumW3ww",
  "5BCgqYg51CANe8qUMPYWJsqRA4Y8HnyfmvkoJxcEmQfY",
  "HqP3LpzMSJex9VMzmJPA7Ufa6JT7HmrUkq4dwDZVfVTt",
  "4kc5wm4xqGbBN3ZRAGG5D6G7KDSbVFnBK9S8khdaxSzJ",
  "F7hiM7VLhxLTsWRmhc1B6KS5DckAxaShug2qjVpndwSe",
  "EZvcpd5BB4UpQ8cS3sZPs2wYmtxRHp8miWLXErj8sqKb",
  "GsbkA45jFk5h9cYcN6Q1ZYzWk7t2RWLW6EqgK2CzUziE",
  "F7tcS67EfP4bBJhWLxCk6ZmPVcsmPnJvPLQcDw5eeR67",
  "2kvieBFaoKsJruDTE3MNJMyRS5ZBoqPZgnYmaFY8fwm7",
  "EUuUbDcafPrmVTD5M6qoJAoyyNbihBhugADAxRMn5he9",
  "AHz6k2W4WZ7oUJXDfVgZe7Ji6Z283KBq55nFvyDHArnn",
  "Bs5XaFx9wS8N5ir4QtTb2exhFMKQdZUmjga1peT2DBXt",
  "2qkW7Akn84Vopf8uWyPXZxSWLDn4jG7QsQFJ3p8neySc",
  "H8sMJSCQxfKiFTCfDR3DUMLPwcRbM61LGFJ8N4dK3WjS",
  "8tX6k7rZEDsyPRKZ7C62qErWfvattRZuHkFVnd6Y2quj",
  "HwtbQBNnLERakdUDuCCLWmUs2oETLFQZeHUWeQdPads",
  "BQDgXVUxxryUXLU7RMAaQj9XbjYfs59wid6gZKz1mJy6",
  "G1d69HFvNiJc4gAJAtjv4DkePPAYv6Z3vttY5XCTq3vN",
  "AgsYPSd9jQZEpbTMsvBWKdiAux3eyghdSY355QVHH9Hs",
  "7z2CX7EVVvyTzMnFUBUmHUWoyymFpspgHB5gdhXaHsLB",
  "3vKC8TPVdcoVKNU4ZDS9nAwSBeyGuvgK1EfLJzVTz6fU",
  "2fWiKRmrSiPZyZTqWrZLZUQatU1XSmfJcVCHhd4wbCxj",
  "7Cf1VzvXyUuo4HCAmU3cETCihYo2tmKerjnudFrYKsQx",
  "9goN9WevrARGxw7vLuZn6o9ZdrZnGrMXvjL8J1De9TKZ",
  "5tgfd6XgwiXB9otEnzFpXK11m7Q7yZUaAJzWK4oT5UGF",
  "EU8jWTJNyoPtVxfSkT8iLkfBBWkpLf8KozsTf3YoyfaE",
  "5aSAxRygWmrPEXuwZDLc22fjJjDJm52gKZxYCnL3Q4dG",
  "26nbFGWaybNdMoPKgG5eNznkrAjFR4dgXSCsbF2Xkt5j",
  "Aromgh1TXEhQnmXE6W2y4NfVWDmvLGYGE5PZTtPH27cb",
  "HEY64fu5RKybmKx2igjoimmevbejHPwBDtdpD4F3hrDb",
  "CRuvrAN3vuTZw8LvHFTUT9eX9hHDefPgZ1PAMwnXdnoo",
  "GzDmgVCX3QHtZ2bdqLtSFunt321KUWZSGP72KuQ7MX9L",
  "373gVJsQo9F5sukFELDRhGdumSAYK95R6RqFdSQoudEv",
  "5MH7kPTq37XP1PZDzaSzDs3W9z42rr7ehJyPQSEge3zG",
  "65kD4UavMVrtHm1smRZCYPkKSwDEgLVsXJqypA3dKpMC",
  "FhFoTPJxwRCPRYvw5JqBMaXryHVyTxUeoH8To841tDdB",
  "4Y5Z7VGgQtxS8QUg9j4TGyb8cCPtMxzicHxDqVTNDm7F",
  "3uYrqEa1bZqoxvEznTyVnpDGWp68aWsDdWgjz9rwyncg",
  "5qLEr7KGJLpzz56awcxiikrBYLDMjYDwN9tE6TMnes2R",
  "5cnuyZiJg7de34R5gKqzP2PibkjEfBzzdfgw5CXdkdJL",
  "9SYh3NJiHVcFQBtDqzEH7zuK8eQ7aPwBpJ1YYuFC2Yp1",
  "A5tS3XvmeZrvBwKfMYL5gbA2kZbaYAxexGAm6ZoTNqr7",
  "7WP4KigJ5n4Pv93dCX1VxhYyDwofiHgtYDxMhfUY2ANT",
  "3ki3NwhD1yFA2CMyL26fUoZYyhSDTvueugX1HmwWokYb",
  "2V7DfGjzuF7QPPQvtReutcm6GEXC17jUbhZQg3fxJfYA",
  "AGU5fn8RQ7DzdU1hBw3PQvWdk49zLmF99FB9FBtvAJEV",
  "5BPDErKbZ4AbizUuJSVDSWBbMWV96BR264gUfdh1oeuZ",
  "3Mga1ACq8QVTqWLfLzfdkDJmNnKhinZARsvFjH422x1A",
  "5Cpo9j5cQc7eTVeUn75k8GnhQXuT8Vo7FSumVYJ93Zur",
  "AaFZgtZ7X6xNEtBsU8XWviQMucVsD7dkTWeMhxnjUCwL",
  "7spbDHkDZjPcvjWCZtTxRu8Vscze5bVDayHKrDf5x5tn",
  "HGqqnkDnVzYNPsA4FSRrmeVymLYmZzpicnCRdvrkQmt7",
  "CyAH9f9awBcfuZqHzwwEs4uJBLEG33S743jxnQX1KcZ6",
  "B9KTwxhc9e6qrjw5nfmhgcN38oKFTBtnef8AwaTPVQ6q",
  "CmDgszJUYEKwzrZB2bfyrGXfNgpmnmcrhZMNq7iTBHG1",
  "6qGRxwEF1d5NvP2hLVQ1C7BmzaSMwRu2eYado84NnKoP",
  "He3TDNeeKSKdPB7rGxWF1Doq1KUv7CrnvaBBsupS3XHX",
  "7qtDv72fGzuuGmyg1FkTxBybYH2sXkUd6u8WXwnkRnpE",
  "J8YEGNZ5ZADT5CUtJMN74Kv5DbNaYSMZ2aUF2ZMP6rK1",
  "3E2nZnXbza5B5kgCLQj2APpoFQeaBuB3yJFUvitvMQyK",
  "DV3ZJKjUvSCnMtEhcRQ1oyoHmYqoce7A63Y3sdfEmS4y",
  "EDxdVxVri2hVoypaWfgf5g9wXwPjPZK4k9TEssWmgNZc",
  "8jX6h76wzVMwdnbZ4fhXt7zEAriynbdLMExPipvHAWYW",
  "298bbso5PPAXduWHqdpKHctfqCmGCPhhjKkU6aKhpt9t",
  "FqrTq3Da6SkAuqtYhbL3MpiH2yPLvYMfqoiVngmtphwo",
  "G7mSfqiheSvLssHZvAo7nS23avssQaBgsTGmEFjvRodC",
  "8p8QGsgsNXmecikxarG5PtUdSjPemzvZJUMWJZgfcNaY",
  "FWofw7nkyaMCQ6THSrXrExr4Hqv8d2f1L9BKM493w8Rk",
  "5B7BwmRp9EJfFGLeyC6S6KWGBHRUHZ7WbaDgW8mnVpQY",
  "29HQ6m65h2HsqEbtAo3pRxhBm1wxsAymuZWywdKNxa3W",
  "2AQdpHJ2JpcEgPiATUXjQxA8QmafFegfQwSLWSprPicm",
  "GduwsgEXVGDVdY25FauB6MkrjoRYdXcC5BpP2Xv33Ehs",
  "8EJJEXn5gM5EU7KBRYNYoE9UAnnwnfqBdfQJ9gbcA44k",
  "91JZYMaqrqjTcWjqzZadgtP6uxGFuXKhZj872MD37k3C",
  "F6fpZiTum87ChP7zE18YYqQjuZReC2wauAP6hfJnQ9qT",
  "GnQdFNENWWDZYe5w6MZFMVGitRD4RxYVoEyKbYQGqZ9N",
  "6Jx9JKAEYbZ97BmRZ6ZsXp2Wq7BmbJHhPhDgPEjtZKf8",
  "9bc61xemFMSZBsQZp59zQppw3sGXrPhRkxrdVBtip6om",
  "52NdYBSkCgUUpsYximNir6Vv57Wp7bDJhtBvD26Goc7S",
  "6HaUaACNevTDE2mVsYooW1ziePVVmjeFg6kPT96FrCpV",
  "G4ee3cNY63JYv9drhAgPk1DxXUzTS1sHzBizxFiorJGR",
  "5PjMxaijeVVQtuEzxK2NxyJeWwUbpTsi2uXuZ653WoHu",
  "7jMTPfPefKAESVoZsdaMo6A24WwSpMed4tWCgUukccQj",
  "8UfoUq3mWe8NbKpQvbv5LXuJ42EDLpjHZezTk4mYgs6f",
  "5JA6jjjTKSEMDUKRcNgVmVtn7QcpWWkL7svTNVjgksEq",
  "7PypumCQ4wco2bV4UAjCwbrdCdnWwyAacjxRhX3yuz8R",
  "5SDrsMNTYdhmApjfqYHDvjoW92f2S42vcc7zNDVcQ9Ej",
  "DFGGZB4xtaYRTeLsmqkzLvWHtQ7ZP6i9eYnM29c7fkie",
  "J4f9gWywspMwDriFJgMbjcszM8htzcckLZ4JGwHr3QNy",
  "GjfrPeLodncGHnZtcMDKnitXbNoomUfPt8y4yBJcXmLK",
  "7S9dLiKT9EMwZV5MAfqSJt4M6yTQL5LCQfJTdJcYyJUg",
  "5T59b2i3UdAGnYEpjYhe8ZJ32QbKNR9RRJFqGAbYsFnj",
  "8BrrdZxJctQrdFd7gmEcA6wfDCSw8W88hY23H88gaN1F",
  "HH1wmcLphiNzC9yWGamdVziFTpHZKWkzk8iYe3pkgyv2",
  "HA9oNhHddEoPFSAEEYtGYZoXDkjky53TQ72jtpAnu81i",
  "8f3oWrmj7pHE1v6LMYZ5kTNAyJgHjv35D8pPiKyfTchh",
  "GVKckHH33ohYEndgixaiLUqb23hhEdzm6eLaqs1NN28o",
  "86H6qCqUU9vfYyXYqDvxJSWmAkp3pDa7tDKskiwitCUv",
  "62D255w5Bg6Puq2fcJVdb9KLXAhqDQqQdMAbBRdxobLF",
  "BqgiMuQqrP5MugLa1XYdum2N6tEcQurqqyZS3AifsF1n",
  "Cw32Ny2xcYdpfJmvFd7h2pRhcbcjoJFq8KrrA8YLwZeh",
  "CJgavJGNWDcYaKzsZ9PfdM8E7D4xXNHMpYyGy2TsPFwU",
  "EWYyMDjJB52wW1rpMCa3J62JY6gT28FV6e1dneKUD7Fe",
  "4FVhozaNWSrd5nEsiyQnss7QnzWtK9mGV1HeRywjbcZU",
  "4o3qAErcapJ6gRLh1m1x4saoLLieWDu7Rx3wpwLc7Zk9",
  "mJozoYsJok196WU7N8v6xPMscigrjTN9XZe9zpLoZnQ",
  "2JHT2TADxfCfDrPTV88cPhqXEhmPnvjurZMCYPfKPnnv",
  "63pNtBi7BGroF9YxdTo2tC6GEWG7bhkxuDjjCQqFeWxy",
  "RBHdGVfDfMjfU6iUfCb1LczMJcQLx7hGnxbzRsoDNvx",
  "EDEcXvEE2uYi1rL4Td5t8qh4bNQSikqdhC8FYMgje5t3",
  "CjEA52d8i3GSfsR7rw2kneRdmwndVnPzK9bRWWNAMFxQ",
  "BKXqwgdQ7fzaF3jkiUhGNrMotNUni4QNfapi3gV64jL2",
  "SU58WHP1mte36jfv9WWETvNtVCJawbc9p1yzwGWWRqn",
  "BbNFwCm3ohtxiNNGbBZrDeUd2NyGTFwQejSgVUMu7RAe",
  "3r5kTr1XEPELK1iaWqnRGCrREppzqFyw9N5U6cqhQE6s",
  "72Yt4CsJ2frPRTZ8gF5uNStBJ6RQRLJixJePKuo6zKyt",
  "HVKDcWkqGfT23Wh5eomvdc8wpexfQhsPe9YxHeMH3jGx",
  "7iYUpVZSFh2AieeXt5v8QGZb8sjo5WehzJJr5qptQds6",
  "EC94BLAYgMr2g3cC7CJuxMx6mhMFnc6eJfLXJcHW3sbc",
  "8N4zRWQvk2tDttHtajbWz167pdLA8o6RPk6u12K4y1qD",
  "C3vVyPvt9hWBsKxGQPrg2qZUCbGLTzMw8VA9RHCMXXHs",
  "DxZiqASCo2J87JBTj1LJeWDkQe73Sc5d9U7aw9mJsuKB",
  "4hbBWiZhhmGfeXQihLJY4XqMGGTRvYVsqVDMEVhYhn2p",
  "425cuNPeepg5A1UwNbgeXJ3p6k63tykbYQSVrEkg2W1o",
  "FXEbLYfi2h9vKJHvjGHkyLnbm47aJJa5jcoqkzgxcbSv",
  "4FJacCZEWnFJ1duWZZoPZFon19m2Sv95cxE86otTC2rz",
  "Dzrv5N2dTUAHcAdRFMuo9c4R4C7q9nr4SwSpkcV4sopL",
  "HPSYk3BNPeq2og4F1pWbJxNtKUpBr5ZVQthfe8FWY8E1",
  "RBHdGVfDfMjfU6iUfCb1LczMJcQLx7hGnxbzRsoDNvx",
  "8dZ8XrXgKqQoD6iLJrFfoY8GV5ZxA4d1aM8LdrmoEYv7",
  "5Zumc1SYPmQ89nqwXqzogeuhdJ85iEMpSk35A4P87pmD",
  "9uyDy9VDBw4K7xoSkhmCAm8NAFCwu4pkF6JeHUCtVKcX",
  "2eicbpitfJXDwqCuFAmPgDP7t2oUotnAzbGzRKLMgSLe",
  "DD3AeAssFvjqTvRTrRAtpfjkBF8FpVKnFuwnMLN9haXD",
  "8VE2uJkoheDbJd9rCyKzfXmiMqAS4o1B3XGshEh86BGk",
  "A8nPhpCJqtqHdqUk35Uj9Hy2YsGXFkCZGuNwvkD3k7VC",
  "4At8nQXanWgRvjbrVXmxMBBdfz39txWVm4SiXEoP1kGh",
  "Du3Ysj1wKbxPKkuPPnvzQLQh8oMSVifs3jGZjJWXFmHN",
  "35ZnqaMNCyjYc9ja7bpiE55goiNVYU943A22Bb9YiLdB",
  "GJRs4FwHtemZ5ZE9x3FNvJ8TMwitKTh21yxdRPqn7npE",
  "8UviNr47S8eL6J3WfDxMRa3hvLta1VDJwNWqsDgtN3Cv",
  "3XKscer6GYCzdejGmKUFJmJHHkuBfAC8nu7ojMpt6uKu",
  "82dGS7Jt4Km8ZgwZVRsJ2V6vPXEhVdgDaMP7cqPGG1TW",
  "BKi84JsPEnXT4UBTZtET5h8Uf2y3qLWAnyAZXtMVNK1o",
  "DfYCNezifxAEsQbAJ1b3j6PX3JVBe8fu11KBhxsbw5d2",
  "D89hHJT5Aqyx1trP6EnGY9jJUB3whgnq3aUvvCqedvzf",
  "BoeMUkCLHchTD31HdXsbDExuZZfcUppSLpYtV3LZTH6U",
  "CopraAQegh7HohkLgYayjoRENXsf66eYaDtwFpbr8zRZ",
  "DefcyKc4yAjRsCLZjdxWuSUzVohXtLna9g22y3pBCm2z",
  "FFMZMjyE6C5GQdok9PWPgXWeiz9arXGC4KvajLakeWEh",
  "2w4A1eGyjRutakyFdmVyBiLPf98qKxNTC2LpuwhaCruZ",
  "4UiT93tyCivCHetditvH15wqWxYrHcoPWzQiKDQYF7Uo",
  "HiLcngHP5y1Jno53tuuNeFHKWhyyZp3XuxtKPszD6rG2",
  "2jwYrvXzypEp9YAFzQM8hGpFru1QeAdA9h7CyyaPpmKS",
  "6PWVauGLhBFHUJspsnBVZHr56ZnbvmhSD2gS7czBHGpE",
  "6YxGd65JbXzgFGWjE44jsyVeCnZp7Bb1wfL9jDia1n8w",
  "8uKJ5wLUFXYdqTJw2JHRzdcWB8JLR96mEf9dreqD6d5X",
  "ANYxxG365hutGYaTdtUQG8u2hC4dFX9mFHKuzy9ABQJi",
  "GtdNPbbWHJjUWzUoGggCfAxiNJwbe1a7FwHn2mcaHC3D",
  "BhNdEGJef9jSqT1iCEkFZ2bYZCdpC1vuiWtqDt87vBVp",
  "9y1wtsMQADoqpWVLXBtMaqDqHFEgAErqDMQ2U4WB2gcg",
  "CodroyzrRNvc5kHRoAQYjpVSr1jA9fLcUWVFouiuWGsD",
  "9r6z6KgkEytHCdQWNxvDQH98PsfU98f1m5PCg47mY2XE",
  "4ZJhPQAgUseCsWhKvJLTmmRRUV74fdoTpQLNfKoekbPY",
  "71hhezkHQ2dhmPySsHVCCkLggfWzPFEBdfEjbn4NCXMG",
  "2v55yoxtubnFcEn9tVZ91wLQkdpies9ATkWjoZxSRkpj",
  "Bq5zux9QsjVwGLHfFXdUNY5zFav42PeUzsuH7uRGohxC",
  "J5BEceL5z1EQ7JBqEFu4BfPN4PYCeQaW3GXrzXFfCzhs",
  "64K4zQJMzoVvVMVMChfPuUuohHJroMDQt7ZdEWF3AUbe",
  "9LcmMfufi8YUcx83RALwF9Y9BPWZ7SqGy4D9VLe2nhhA",
  "26kcZkdjJc94PdhqiLiEaGiLCYgAVVUfpDaZyK4cqih3",
  "DTNnXBh7JcKTzfWbqcuNYaYBQXS2fWWoXEdJ5iyNwvFX",
  "6NUiVmsNjsi4AfsMsEiaezsaV9N4N1ZrD4jEnuWNRvyb",
  "9tXiuRRw7kbejLhZXtxDxYs2REe43uH2e7k1kocgdM9B",
  "B7oQQtF7Wdzp7acSqpp5KWWigpywipBN84NVeosf7CxA",
  "BZtgQEyS6eXUXicYPHecYQ7PybqodXQMvkjUbP4R8mUU",
  "W1ZQRwUfSkDKy2oefRBUWph82Vr2zg9txWMA8RQazN5",
  "HZeLxbZ9uHtSpwZC3LBr4Nubd14iHwz7bRSghRZf5VCG",
  "FERjPVNEa7Udq8CEv68h6tPL46Tq7ieE49HrE2wea3XT",
  "2Sj4MZvmLhud4uRmGHJvDxq612nmF4JJsU1R4ZjNNGMS",
  "GybhvUZzTq4qYBc292dz4HE4oQPZJGC9xGJdEH9uYeHK",
  "Dokia75SVtetShgapUBoVFfYjL99fQyr1twxKKyTZKa3",
  "7yMSDwTMS9MFTDS7PN3vnhB68ghpXsdxv64nTNb4FeDz",
  "B7oQQtF7Wdzp7acSqpp5KWWigpywipBN84NVeosf7CxA",
  "4NfStDkdst2Cp6rfsowmrSte2cGfdadjtjeEwbZXLukA",
  "8EzbUfvcRT1Q6RL462ekGkgqbxsPmwC5FMLQZhSPMjJ3",
  "F4RSGd4BRXscCqAVG3rFLiPVpo7v6j1drVqnvSM3rBKH",
  "CeaZcxBNLpJWtxzt58qQmfMBtJY8pQLvursXTJYGQpbNz",
  "3ucNos4NbumPLZNWztqGHNFFgkHeRMBQAVemeeomsUxv",
  "2hNHZg7XBhuhHVZ3JDEi4buq2fPQwuWBdQ9xkH7t1GQX",
  "BA7UdvSVywRisn8YLMpg6emrNNk3N3TFqSrKJXmTBKdt",
  "ywaaLvG7t1vXJo8sT3UzE8yzzZtxLM7Fmev64Jbooye",
  "9Hst4fTfQJXp1fxyVx1Lk1TubjNegFwXCedZkMRPaYAK",
  "G2FiE1yn9N9ZJx5e1E2LxxMnHvb1H3hCuHLPfKJ98smA",
  "BVRbyLjjfSBcoyiYFuxbgKYnWuiFaF9CSXEa5vdSZ9Hh",
  "JCFBoXNyFu9eLaskXm11qxSdx6x7i3LK8pETJE2LRGt2",
  "ENERLy2pi2mK2dYngha6rwA5ywW2Dwv5dacgafW3X59C",
  "8RcZHucpVHkHWRRdMhJZsxBK9mqKSYnMKGqtF84U8YEo",
  "7rhxnLV8C77o6d8oz26AgK8x8m5ePsdeRawjqvojbjnQ",
  "7riFsDxbskTqDtCSjev2jN9hyAJqeKmbWqgfiWD6ikUC",
  "3vxheE5C46XzK4XftziRhwAf8QAfipD7HXXWj25mgkom",
  "25mYnjJ2MXHZH6NvTTdA63JvjgRVcuiaj6MRiEQNs1Dq",
  "8s9j5qUtuE9PGA5s7QeAXEh5oc2UGr71pmJXgyiZMHkt",
  "2snHHreXbpJ7UwZxPe37gnUNf7Wx7wv6UKDSR2JckKuS",
  "CSEncqtqbmNRjve42sNnbs5cCSmrjUNsAEwc17XY2RCs"
]);

async function makeApiCall(url) {
  try {
    apiCallCount++; // Increment API call count
    const apiKey = getNextApiKey(); // Get next available API key

    const response = await fetch(url, { method: "GET", headers: { token: apiKey } });

    if (!response.ok) {
      const responseText = await response.text();
      console.error(`❌ Failed to fetch data. Status: ${response.status} Response: ${responseText} ${url}`);
      return null; // Return null if the call fails
    }

    const data = await response.json();
    return data.success ? data.data : null; // Return the data if success, else null
  } catch (error) {
    console.error(`❌ Error during API request: ${error.message}`);
    return null; // Return null if the call fails
  }
}

// Function to fetch top holders for a token concurrently
async function fetchTopHolders(tokenAddress, maxHolders, pageSize) {
  if (!tokenAddress) return [];

  let allHolders = [];
  const fetchPromises = [];
  let totalFetched = 0;

  try {
    // Parallel requests for pages
    while (totalFetched < maxHolders) {
      const url = `https://pro-api.solscan.io/v2.0/token/holders?address=${encodeURIComponent(tokenAddress)}&page=${Math.ceil((totalFetched + 1) / pageSize)}&page_size=${pageSize}`;
      fetchPromises.push(makeApiCall(url)); // Use makeApiCall helper function
      totalFetched += pageSize;
    }

    const responses = await Promise.all(fetchPromises); // Fetch all pages concurrently
    const holderPromises = responses.map((data) => {
      if (!data || !data.items) return [];
      return data.items
        .filter(holder => holder.owner !== "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1")
        .map(holder => ({
          address: holder.address,
          amount: holder.amount,
          decimals: holder.decimals,
          owner: holder.owner,
          rank: holder.rank,
        }));
    });

    allHolders = (await Promise.all(holderPromises)).flat();
    return allHolders.slice(0, maxHolders);
  } catch (error) {
    console.error(`❌ Error fetching holders for ${tokenAddress}:`, error.message);
    return [];
  }
}

// Function to fetch Defi activities for a wallet address and token address
async function fetchDefiActivities(walletAddress, tokenAddress) {
  const url = `https://pro-api.solscan.io/v2.0/account/defi/activities?address=${encodeURIComponent(walletAddress)}&activity_type[]=ACTIVITY_TOKEN_SWAP&activity_type[]=ACTIVITY_AGG_TOKEN_SWAP&page=1&page_size=100&sort_by=block_time&sort_order=desc`;
  const activities = await makeApiCall(url);
  let transactionCount = 0;
  if (!activities) return { buys: 0, sells: 0, totalBought: 0, totalSold: 0, lastSell: "" };

  let buys = 0, sells = 0, totalBought = 0, totalSold = 0;
  let lastSell = ""; // Store the most recent sell transaction

  activities.forEach(tx => {
    transactionCount += 1;
    (Array.isArray(tx.routers) ? tx.routers : [tx.routers]).forEach(router => {
      if (router.token1 === tokenAddress) {
        sells++;
        totalSold += router.amount1 || 0;
        if (!lastSell || tx.block_time > lastSell.block_time) {
          lastSell = {
            trans_id: tx.trans_id,
            block_time: tx.block_time,
            value: router.amount1,
            time: tx.time,
            token1: router.token1,
            token2: router.token2,
          };
        }
      } else if (router.token2 === tokenAddress) {
        buys++;
        totalBought += router.amount2 || 0;
      }
    });
  });
  return {
    walletAddress, buys, sells, totalBought, totalSold, transactionCount, lastSell: lastSell ? lastSell.time : ""
  };
}

// Function to fetch token metadata
async function fetchTokenMetadata(tokenAddress) {
  const url = `https://pro-api.solscan.io/v2.0/token/meta?address=${encodeURIComponent(tokenAddress)}`;
  const metadata = await makeApiCall(url);
  return metadata || { supply: 1 }; // Default to 1 supply to prevent division errors
}

// Function to fetch Sol transfers for a wallet address
async function fetchSolTransfers(walletAddress) {
  const url = `https://pro-api.solscan.io/v2.0/account/transfer?address=${walletAddress}&activity_type[]=ACTIVITY_SPL_TRANSFER&value[]=10&token=So11111111111111111111111111111111111111111&page=1&page_size=40&sort_by=block_time&sort_order=desc`;
  return await makeApiCall(url) || [];
}

// Function to fetch token accounts with pagination for a wallet address
async function fetchTokenAccounts(walletAddress) {
  const pageSize = 40; // Number of items per page
  let page = 1; // Start with the first page
  let allTokenAccounts = []; // Array to store all token accounts

  while (true) {
    // Construct the URL with pagination parameters
    const url = `https://pro-api.solscan.io/v2.0/account/token-accounts?address=${walletAddress}&type=token&page=${page}&page_size=${pageSize}`;

    // Fetch the data from the API
    const response = await makeApiCall(url);

    // If the response is empty or no more results, break the loop
    if (!response || response.length === 0) {
      break;
    }

    // Add the current page's results to the allTokenAccounts array
    allTokenAccounts = allTokenAccounts.concat(response);

    // Check if there are more pages. This depends on how the API signals it. 
    // If there's a `next_page` or equivalent in the response, we continue; otherwise, break.
    if (!response.hasOwnProperty('next_page') || !response.next_page) {
      break; // No more pages
    }

    // Increment the page number for the next iteration
    page++;
  }

  return allTokenAccounts; // Return the concatenated list of all token accounts
}

// Function to fetch token markets for a token address
async function fetchTokenMarkets(tokenAddress) {
  const url = `https://pro-api.solscan.io/v2.0/token/markets?token[]=${tokenAddress}&page=1&page_size=10`;
  return await makeApiCall(url) || [];
}

// Function to fetch token creation history for a wallet address
async function fetchTokenCreationHistory(walletAddress) {
  if (!walletAddress) {
    return []
  }
  const url = `https://pro-api.solscan.io/v2.0/account/defi/activities?address=${encodeURIComponent(walletAddress)}&activity_type[]=ACTIVITY_SPL_INIT_MINT&page=1&page_size=100&sort_by=block_time&sort_order=desc`;
  const activities = await makeApiCall(url) || [];

  const tokensCreated = await Promise.all(
    activities.flatMap(tx => {
      const routers = Array.isArray(tx.routers) ? tx.routers : [tx.routers];
      return routers
        .filter(router => router.token1)
        .map(async router => {
          const metadata = await fetchTokenMetadata(router.token1);
          return { tokenAddress: router.token1, metadata };
        });
    })
  );
  return tokensCreated.filter(Boolean); // Remove undefined/null values
}

// Function to get the number of API calls made
function getApiCallCount() {
  const temp = apiCallCount;
  apiCallCount = 0;
  return temp;
}

// Refactored main function to fetch all token holder data and related activities concurrently
async function getTokenHolderData(tokenAddress, supply, maxHolders, pageSize) {
  console.log(`🔄 Fetching token holder data for: ${tokenAddress}`);
  const holders = await fetchTopHolders(tokenAddress, maxHolders, pageSize);
  if (!holders.length) return [];

  const defiResults = await Promise.all(holders.map(holder => fetchDefiActivities(holder.owner, tokenAddress)));
  // Directly map defiResults to the final return format
  return defiResults.map(({ walletAddress, buys, sells, totalBought, totalSold, transactionCount, lastSell }, index) => ({
    Address: walletAddress,
    "Current Holding (%)": ((holders[index].amount / supply) * 100).toFixed(2),
    "Total Buys": buys,
    "Total Sells": sells,
    "Total Bought (%)": ((totalBought / supply) * 100).toFixed(2),
    "Total Sold (%)": ((totalSold / supply) * 100).toFixed(2),
    "Transaction Count": transactionCount,
    "Last Sell": lastSell
  }));
}

async function getFundingMap(topHolders) {
  const fundingMap = {}; // Map to group funding wallets for clustering
  const recipientFunding = new Map(); // Tracks recipient -> { sender, count }

  const batchSize = 10; // Adjust based on API limits and network conditions
  const batches = [];




  // Split topHolders into batches for better concurrency
  for (let i = 0; i < topHolders.length; i += batchSize) {
    batches.push(topHolders.slice(i, i + batchSize));
  }

  // Fetch transactions for each batch of holders concurrently
  const fetchPromises = batches.map(batch => {
    const holderAddresses = batch.map(holder => holder.Address);
    return fetchTransactionsForBatch(holderAddresses);
  });

  // Wait for all batches to be fetched
  const allSolTransactions = await Promise.all(fetchPromises);

  // Iterate over the fetched transactions and populate the funding map
  allSolTransactions.forEach((batchTransactions, batchIndex) => {
    const batchHolders = batches[batchIndex]; // Get holders for the current batch

    batchTransactions.forEach((solTransactions, holderIndex) => {
      const holder = batchHolders[holderIndex].Address;

      // Iterate through transactions and populate the funding map
      solTransactions.forEach(transaction => {
        const recipient = transaction.to_address;
        const sender = transaction.from_address;

        // Skip excluded senders
        if (excludedSenders.has(sender)) return;

        // If the recipient is the current holder, add sender to funding map
        if (recipient === holder) {
          if (!fundingMap[sender]) {
            fundingMap[sender] = new Set();
          }
          fundingMap[sender].add(holder); // Add holder to sender's list

          // Track which sender provided funds to each recipient
          if (!recipientFunding.has(recipient) || recipientFunding.get(recipient).count < solTransactions.length) {
            recipientFunding.set(recipient, { sender, count: solTransactions.length });
          }
        }
      });
    });
  });

  // Filtering Step: Remove recipients appearing in multiple senders
  Object.keys(fundingMap).forEach(sender => {
    fundingMap[sender] = new Set([...fundingMap[sender]].filter(holder => recipientFunding.get(holder).sender === sender));
  });

  return fundingMap;
}
// Fetch transactions for a batch of holders
async function fetchTransactionsForBatch(holderAddresses) {
  // Create a batch of promises for fetching transactions
  const fetchPromises = holderAddresses.map(walletAddress => fetchSolTransfers(walletAddress));

  // Wait for all transactions to be fetched concurrently for the batch
  return await Promise.all(fetchPromises);
}

// Export the functions and api call count
module.exports = {
  fetchDefiActivities,
  fetchTokenMetadata,
  fetchTokenMarkets,
  fetchTokenCreationHistory,
  fetchSolTransfers,
  getApiCallCount,
  getTokenHolderData,
  getFundingMap,
  fetchTokenAccounts
};
